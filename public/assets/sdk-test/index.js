/*! For license information please see index.js.LICENSE.txt */
(()=>{"use strict";var e,t,n={448:(e,t,n)=>{var r=n(294),a=n(840);function l(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,o={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(o[e]=t,e=0;e<t.length;e++)i.add(t[e])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function g(e,t,n,r,a,l,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=l,this.removeEmptyString=i}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];m[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function y(e,t,n,r){var a=m.hasOwnProperty(t)?m[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!d.call(h,e)||!d.call(p,e)&&(f.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,b);m[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,b);m[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,b);m[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var x=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=Symbol.for("react.element"),j=Symbol.for("react.portal"),E=Symbol.for("react.fragment"),w=Symbol.for("react.strict_mode"),T=Symbol.for("react.profiler"),S=Symbol.for("react.provider"),C=Symbol.for("react.context"),O=Symbol.for("react.forward_ref"),N=Symbol.for("react.suspense"),I=Symbol.for("react.suspense_list"),R=Symbol.for("react.memo"),P=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var A=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var L=Symbol.iterator;function _(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=L&&e[L]||e["@@iterator"])?e:null}var F,M=Object.assign;function D(e){if(void 0===F)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);F=t&&t[1]||""}return"\n"+F+e}var z=!1;function B(e,t){if(!e||z)return"";z=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),l=r.stack.split("\n"),i=a.length-1,o=l.length-1;1<=i&&0<=o&&a[i]!==l[o];)o--;for(;1<=i&&0<=o;i--,o--)if(a[i]!==l[o]){if(1!==i||1!==o)do{if(i--,0>--o||a[i]!==l[o]){var s="\n"+a[i].replace(" at new "," at ");return e.displayName&&s.includes("<anonymous>")&&(s=s.replace("<anonymous>",e.displayName)),s}}while(1<=i&&0<=o);break}}}finally{z=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?D(e):""}function U(e){switch(e.tag){case 5:return D(e.type);case 16:return D("Lazy");case 13:return D("Suspense");case 19:return D("SuspenseList");case 0:case 2:case 15:return e=B(e.type,!1);case 11:return e=B(e.type.render,!1);case 1:return e=B(e.type,!0);default:return""}}function H(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case j:return"Portal";case T:return"Profiler";case w:return"StrictMode";case N:return"Suspense";case I:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case C:return(e.displayName||"Context")+".Consumer";case S:return(e._context.displayName||"Context")+".Provider";case O:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case R:return null!==(t=e.displayName||null)?t:H(e.type)||"Memo";case P:t=e._payload,e=e._init;try{return H(e(t))}catch(e){}}return null}function V(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return H(t);case 8:return t===w?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function W(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function $(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function G(e){e._valueTracker||(e._valueTracker=function(e){var t=$(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,l=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,l.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=$(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Y(e,t){var n=t.checked;return M({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function X(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=W(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function q(e,t){null!=(t=t.checked)&&y(e,"checked",t,!1)}function J(e,t){q(e,t);var n=W(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,W(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+W(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(l(91));return M({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(l(92));if(te(n)){if(1<n.length)throw Error(l(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:W(n)}}function le(e,t){var n=W(t.value),r=W(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function oe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function se(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?oe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,ue,de=(ue=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ue(e,t)}))}:ue);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function ge(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function me(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=ge(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ve=M({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function be(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(l(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(l(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(l(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(l(62))}}function ye(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var xe=null;function ke(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var je=null,Ee=null,we=null;function Te(e){if(e=pa(e)){if("function"!=typeof je)throw Error(l(280));var t=e.stateNode;t&&(t=ga(t),je(e.stateNode,e.type,t))}}function Se(e){Ee?we?we.push(e):we=[e]:Ee=e}function Ce(){if(Ee){var e=Ee,t=we;if(we=Ee=null,Te(e),t)for(e=0;e<t.length;e++)Te(t[e])}}function Oe(e,t){return e(t)}function Ne(){}var Ie=!1;function Re(e,t,n){if(Ie)return e(t,n);Ie=!0;try{return Oe(e,t,n)}finally{Ie=!1,(null!==Ee||null!==we)&&(Ne(),Ce())}}function Pe(e,t){var n=e.stateNode;if(null===n)return null;var r=ga(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(l(231,t,typeof n));return n}var Ae=!1;if(u)try{var Le={};Object.defineProperty(Le,"passive",{get:function(){Ae=!0}}),window.addEventListener("test",Le,Le),window.removeEventListener("test",Le,Le)}catch(ue){Ae=!1}function _e(e,t,n,r,a,l,i,o,s){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Fe=!1,Me=null,De=!1,ze=null,Be={onError:function(e){Fe=!0,Me=e}};function Ue(e,t,n,r,a,l,i,o,s){Fe=!1,Me=null,_e.apply(Be,arguments)}function He(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ve(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function We(e){if(He(e)!==e)throw Error(l(188))}function $e(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=He(e)))throw Error(l(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return We(a),e;if(i===r)return We(a),t;i=i.sibling}throw Error(l(188))}if(n.return!==r.return)n=a,r=i;else{for(var o=!1,s=a.child;s;){if(s===n){o=!0,n=a,r=i;break}if(s===r){o=!0,r=a,n=i;break}s=s.sibling}if(!o){for(s=i.child;s;){if(s===n){o=!0,n=i,r=a;break}if(s===r){o=!0,r=i,n=a;break}s=s.sibling}if(!o)throw Error(l(189))}}if(n.alternate!==r)throw Error(l(190))}if(3!==n.tag)throw Error(l(188));return n.stateNode.current===n?e:t}(e))?Ge(e):null}function Ge(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ge(e);if(null!==t)return t;e=e.sibling}return null}var Ke=a.unstable_scheduleCallback,Qe=a.unstable_cancelCallback,Ye=a.unstable_shouldYield,Xe=a.unstable_requestPaint,qe=a.unstable_now,Je=a.unstable_getCurrentPriorityLevel,Ze=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,lt=null;var it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(ot(e)/st|0)|0},ot=Math.log,st=Math.LN2;var ct=64,ut=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,l=e.pingedLanes,i=268435455&n;if(0!==i){var o=i&~a;0!==o?r=dt(o):0!==(l&=i)&&(r=dt(l))}else 0!==(i=n&~a)?r=dt(i):0!==l&&(r=dt(l));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&a)&&((a=r&-r)>=(l=t&-t)||16===a&&0!=(4194240&l)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-it(t)),r|=e[n],t&=~a;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:default:return-1}}function ht(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function mt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function vt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var bt=0;function yt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var xt,kt,jt,Et,wt,Tt=!1,St=[],Ct=null,Ot=null,Nt=null,It=new Map,Rt=new Map,Pt=[],At="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Lt(e,t){switch(e){case"focusin":case"focusout":Ct=null;break;case"dragenter":case"dragleave":Ot=null;break;case"mouseover":case"mouseout":Nt=null;break;case"pointerover":case"pointerout":It.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Rt.delete(t.pointerId)}}function _t(e,t,n,r,a,l){return null===e||e.nativeEvent!==l?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:l,targetContainers:[a]},null!==t&&(null!==(t=pa(t))&&kt(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function Ft(e){var t=fa(e.target);if(null!==t){var n=He(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ve(n)))return e.blockedOn=t,void wt(e.priority,(function(){jt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Mt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=pa(n))&&kt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);xe=r,n.target.dispatchEvent(r),xe=null,t.shift()}return!0}function Dt(e,t,n){Mt(e)&&n.delete(t)}function zt(){Tt=!1,null!==Ct&&Mt(Ct)&&(Ct=null),null!==Ot&&Mt(Ot)&&(Ot=null),null!==Nt&&Mt(Nt)&&(Nt=null),It.forEach(Dt),Rt.forEach(Dt)}function Bt(e,t){e.blockedOn===t&&(e.blockedOn=null,Tt||(Tt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,zt)))}function Ut(e){function t(t){return Bt(t,e)}if(0<St.length){Bt(St[0],e);for(var n=1;n<St.length;n++){var r=St[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Ct&&Bt(Ct,e),null!==Ot&&Bt(Ot,e),null!==Nt&&Bt(Nt,e),It.forEach(t),Rt.forEach(t),n=0;n<Pt.length;n++)(r=Pt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Pt.length&&null===(n=Pt[0]).blockedOn;)Ft(n),null===n.blockedOn&&Pt.shift()}var Ht=x.ReactCurrentBatchConfig;function Vt(e,t,n,r){var a=bt,l=Ht.transition;Ht.transition=null;try{bt=1,$t(e,t,n,r)}finally{bt=a,Ht.transition=l}}function Wt(e,t,n,r){var a=bt,l=Ht.transition;Ht.transition=null;try{bt=4,$t(e,t,n,r)}finally{bt=a,Ht.transition=l}}function $t(e,t,n,r){var a=Kt(e,t,n,r);if(null===a)zr(e,t,r,Gt,n),Lt(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Ct=_t(Ct,e,t,n,r,a),!0;case"dragenter":return Ot=_t(Ot,e,t,n,r,a),!0;case"mouseover":return Nt=_t(Nt,e,t,n,r,a),!0;case"pointerover":var l=a.pointerId;return It.set(l,_t(It.get(l)||null,e,t,n,r,a)),!0;case"gotpointercapture":return l=a.pointerId,Rt.set(l,_t(Rt.get(l)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Lt(e,r),4&t&&-1<At.indexOf(e)){for(;null!==a;){var l=pa(a);if(null!==l&&xt(l),null===(l=Kt(e,t,n,r))&&zr(e,t,r,Gt,n),l===a)break;a=l}null!==a&&r.stopPropagation()}else zr(e,t,r,null,n)}var Gt=null;function Kt(e,t,n,r){if(Gt=null,null!==(e=fa(e=ke(r))))if(null===(t=He(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ve(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Gt=e,null}function Qt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Yt=null,Xt=null,qt=null;function Jt(){if(qt)return qt;var e,t,n=Xt,r=n.length,a="value"in Yt?Yt.value:Yt.textContent,l=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[l-t];t++);return qt=a.slice(e,1<t?1-t:void 0)}function Zt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function en(){return!0}function tn(){return!1}function nn(e){function t(t,n,r,a,l){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=l,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?en:tn,this.isPropagationStopped=tn,this}return M(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=en)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=en)},persist:function(){},isPersistent:en}),t}var rn,an,ln,on={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},sn=nn(on),cn=M({},on,{view:0,detail:0}),un=nn(cn),dn=M({},cn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:jn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(rn=e.screenX-ln.screenX,an=e.screenY-ln.screenY):an=rn=0,ln=e),rn)},movementY:function(e){return"movementY"in e?e.movementY:an}}),fn=nn(dn),pn=nn(M({},dn,{dataTransfer:0})),hn=nn(M({},cn,{relatedTarget:0})),gn=nn(M({},on,{animationName:0,elapsedTime:0,pseudoElement:0})),mn=nn(M({},on,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),vn=nn(M({},on,{data:0})),bn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},yn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xn[e])&&!!t[e]}function jn(){return kn}var En=nn(M({},cn,{key:function(e){if(e.key){var t=bn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Zt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?yn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:jn,charCode:function(e){return"keypress"===e.type?Zt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Zt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),wn=nn(M({},dn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=nn(M({},cn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:jn})),Sn=nn(M({},on,{propertyName:0,elapsedTime:0,pseudoElement:0})),Cn=nn(M({},dn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),On=[9,13,27,32],Nn=u&&"CompositionEvent"in window,In=null;u&&"documentMode"in document&&(In=document.documentMode);var Rn=u&&"TextEvent"in window&&!In,Pn=u&&(!Nn||In&&8<In&&11>=In),An=String.fromCharCode(32),Ln=!1;function _n(e,t){switch(e){case"keyup":return-1!==On.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Fn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Mn=!1;var Dn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function zn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Dn[e.type]:"textarea"===t}function Bn(e,t,n,r){Se(r),0<(t=Ur(t,"onChange")).length&&(n=new sn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Un=null,Hn=null;function Vn(e){Ar(e,0)}function Wn(e){if(K(ha(e)))return e}function $n(e,t){if("change"===e)return t}var Gn=!1;if(u){var Kn;if(u){var Qn="oninput"in document;if(!Qn){var Yn=document.createElement("div");Yn.setAttribute("oninput","return;"),Qn="function"==typeof Yn.oninput}Kn=Qn}else Kn=!1;Gn=Kn&&(!document.documentMode||9<document.documentMode)}function Xn(){Un&&(Un.detachEvent("onpropertychange",qn),Hn=Un=null)}function qn(e){if("value"===e.propertyName&&Wn(Hn)){var t=[];Bn(t,Hn,e,ke(e)),Re(Vn,t)}}function Jn(e,t,n){"focusin"===e?(Xn(),Hn=n,(Un=t).attachEvent("onpropertychange",qn)):"focusout"===e&&Xn()}function Zn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Wn(Hn)}function er(e,t){if("click"===e)return Wn(t)}function tr(e,t){if("input"===e||"change"===e)return Wn(t)}var nr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function rr(e,t){if(nr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!d.call(t,a)||!nr(e[a],t[a]))return!1}return!0}function ar(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function lr(e,t){var n,r=ar(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ar(r)}}function ir(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?ir(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function or(){for(var e=window,t=Q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Q((e=t.contentWindow).document)}return t}function sr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function cr(e){var t=or(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&ir(n.ownerDocument.documentElement,n)){if(null!==r&&sr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,l=Math.min(r.start,a);r=void 0===r.end?l:Math.min(r.end,a),!e.extend&&l>r&&(a=r,r=l,l=a),a=lr(n,l);var i=lr(n,r);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),l>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var ur=u&&"documentMode"in document&&11>=document.documentMode,dr=null,fr=null,pr=null,hr=!1;function gr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;hr||null==dr||dr!==Q(r)||("selectionStart"in(r=dr)&&sr(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},pr&&rr(pr,r)||(pr=r,0<(r=Ur(fr,"onSelect")).length&&(t=new sn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=dr)))}function mr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var vr={animationend:mr("Animation","AnimationEnd"),animationiteration:mr("Animation","AnimationIteration"),animationstart:mr("Animation","AnimationStart"),transitionend:mr("Transition","TransitionEnd")},br={},yr={};function xr(e){if(br[e])return br[e];if(!vr[e])return e;var t,n=vr[e];for(t in n)if(n.hasOwnProperty(t)&&t in yr)return br[e]=n[t];return e}u&&(yr=document.createElement("div").style,"AnimationEvent"in window||(delete vr.animationend.animation,delete vr.animationiteration.animation,delete vr.animationstart.animation),"TransitionEvent"in window||delete vr.transitionend.transition);var kr=xr("animationend"),jr=xr("animationiteration"),Er=xr("animationstart"),wr=xr("transitionend"),Tr=new Map,Sr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Cr(e,t){Tr.set(e,t),s(t,[e])}for(var Or=0;Or<Sr.length;Or++){var Nr=Sr[Or];Cr(Nr.toLowerCase(),"on"+(Nr[0].toUpperCase()+Nr.slice(1)))}Cr(kr,"onAnimationEnd"),Cr(jr,"onAnimationIteration"),Cr(Er,"onAnimationStart"),Cr("dblclick","onDoubleClick"),Cr("focusin","onFocus"),Cr("focusout","onBlur"),Cr(wr,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ir="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Rr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ir));function Pr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,i,o,s,c){if(Ue.apply(this,arguments),Fe){if(!Fe)throw Error(l(198));var u=Me;Fe=!1,Me=null,De||(De=!0,ze=u)}}(r,t,void 0,e),e.currentTarget=null}function Ar(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var l=void 0;if(t)for(var i=r.length-1;0<=i;i--){var o=r[i],s=o.instance,c=o.currentTarget;if(o=o.listener,s!==l&&a.isPropagationStopped())break e;Pr(a,o,c),l=s}else for(i=0;i<r.length;i++){if(s=(o=r[i]).instance,c=o.currentTarget,o=o.listener,s!==l&&a.isPropagationStopped())break e;Pr(a,o,c),l=s}}}if(De)throw e=ze,De=!1,ze=null,e}function Lr(e,t){var n=t[ca];void 0===n&&(n=t[ca]=new Set);var r=e+"__bubble";n.has(r)||(Dr(t,e,2,!1),n.add(r))}function _r(e,t,n){var r=0;t&&(r|=4),Dr(n,e,r,t)}var Fr="_reactListening"+Math.random().toString(36).slice(2);function Mr(e){if(!e[Fr]){e[Fr]=!0,i.forEach((function(t){"selectionchange"!==t&&(Rr.has(t)||_r(t,!1,e),_r(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Fr]||(t[Fr]=!0,_r("selectionchange",!1,t))}}function Dr(e,t,n,r){switch(Qt(t)){case 1:var a=Vt;break;case 4:a=Wt;break;default:a=$t}n=a.bind(null,t,n,e),a=void 0,!Ae||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function zr(e,t,n,r,a){var l=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var o=r.stateNode.containerInfo;if(o===a||8===o.nodeType&&o.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var s=i.tag;if((3===s||4===s)&&((s=i.stateNode.containerInfo)===a||8===s.nodeType&&s.parentNode===a))return;i=i.return}for(;null!==o;){if(null===(i=fa(o)))return;if(5===(s=i.tag)||6===s){r=l=i;continue e}o=o.parentNode}}r=r.return}Re((function(){var r=l,a=ke(n),i=[];e:{var o=Tr.get(e);if(void 0!==o){var s=sn,c=e;switch(e){case"keypress":if(0===Zt(n))break e;case"keydown":case"keyup":s=En;break;case"focusin":c="focus",s=hn;break;case"focusout":c="blur",s=hn;break;case"beforeblur":case"afterblur":s=hn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=fn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=pn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=Tn;break;case kr:case jr:case Er:s=gn;break;case wr:s=Sn;break;case"scroll":s=un;break;case"wheel":s=Cn;break;case"copy":case"cut":case"paste":s=mn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=wn}var u=0!=(4&t),d=!u&&"scroll"===e,f=u?null!==o?o+"Capture":null:o;u=[];for(var p,h=r;null!==h;){var g=(p=h).stateNode;if(5===p.tag&&null!==g&&(p=g,null!==f&&(null!=(g=Pe(h,f))&&u.push(Br(h,g,p)))),d)break;h=h.return}0<u.length&&(o=new s(o,c,null,n,a),i.push({event:o,listeners:u}))}}if(0==(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(o="mouseover"===e||"pointerover"===e)||n===xe||!(c=n.relatedTarget||n.fromElement)||!fa(c)&&!c[sa])&&(s||o)&&(o=a.window===a?a:(o=a.ownerDocument)?o.defaultView||o.parentWindow:window,s?(s=r,null!==(c=(c=n.relatedTarget||n.toElement)?fa(c):null)&&(c!==(d=He(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(s=null,c=r),s!==c)){if(u=fn,g="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(u=wn,g="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==s?o:ha(s),p=null==c?o:ha(c),(o=new u(g,h+"leave",s,n,a)).target=d,o.relatedTarget=p,g=null,fa(a)===r&&((u=new u(f,h+"enter",c,n,a)).target=p,u.relatedTarget=d,g=u),d=g,s&&c)e:{for(f=c,h=0,p=u=s;p;p=Hr(p))h++;for(p=0,g=f;g;g=Hr(g))p++;for(;0<h-p;)u=Hr(u),h--;for(;0<p-h;)f=Hr(f),p--;for(;h--;){if(u===f||null!==f&&u===f.alternate)break e;u=Hr(u),f=Hr(f)}u=null}else u=null;null!==s&&Vr(i,o,s,u,!1),null!==c&&null!==d&&Vr(i,d,c,u,!0)}if("select"===(s=(o=r?ha(r):window).nodeName&&o.nodeName.toLowerCase())||"input"===s&&"file"===o.type)var m=$n;else if(zn(o))if(Gn)m=tr;else{m=Zn;var v=Jn}else(s=o.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(m=er);switch(m&&(m=m(e,r))?Bn(i,m,n,a):(v&&v(e,o,r),"focusout"===e&&(v=o._wrapperState)&&v.controlled&&"number"===o.type&&ee(o,"number",o.value)),v=r?ha(r):window,e){case"focusin":(zn(v)||"true"===v.contentEditable)&&(dr=v,fr=r,pr=null);break;case"focusout":pr=fr=dr=null;break;case"mousedown":hr=!0;break;case"contextmenu":case"mouseup":case"dragend":hr=!1,gr(i,n,a);break;case"selectionchange":if(ur)break;case"keydown":case"keyup":gr(i,n,a)}var b;if(Nn)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else Mn?_n(e,n)&&(y="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(y="onCompositionStart");y&&(Pn&&"ko"!==n.locale&&(Mn||"onCompositionStart"!==y?"onCompositionEnd"===y&&Mn&&(b=Jt()):(Xt="value"in(Yt=a)?Yt.value:Yt.textContent,Mn=!0)),0<(v=Ur(r,y)).length&&(y=new vn(y,e,null,n,a),i.push({event:y,listeners:v}),b?y.data=b:null!==(b=Fn(n))&&(y.data=b))),(b=Rn?function(e,t){switch(e){case"compositionend":return Fn(t);case"keypress":return 32!==t.which?null:(Ln=!0,An);case"textInput":return(e=t.data)===An&&Ln?null:e;default:return null}}(e,n):function(e,t){if(Mn)return"compositionend"===e||!Nn&&_n(e,t)?(e=Jt(),qt=Xt=Yt=null,Mn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Pn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&(0<(r=Ur(r,"onBeforeInput")).length&&(a=new vn("onBeforeInput","beforeinput",null,n,a),i.push({event:a,listeners:r}),a.data=b))}Ar(i,t)}))}function Br(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ur(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,l=a.stateNode;5===a.tag&&null!==l&&(a=l,null!=(l=Pe(e,n))&&r.unshift(Br(e,l,a)),null!=(l=Pe(e,t))&&r.push(Br(e,l,a))),e=e.return}return r}function Hr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Vr(e,t,n,r,a){for(var l=t._reactName,i=[];null!==n&&n!==r;){var o=n,s=o.alternate,c=o.stateNode;if(null!==s&&s===r)break;5===o.tag&&null!==c&&(o=c,a?null!=(s=Pe(n,l))&&i.unshift(Br(n,s,o)):a||null!=(s=Pe(n,l))&&i.push(Br(n,s,o))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Wr=/\r\n?/g,$r=/\u0000|\uFFFD/g;function Gr(e){return("string"==typeof e?e:""+e).replace(Wr,"\n").replace($r,"")}function Kr(e,t,n){if(t=Gr(t),Gr(e)!==t&&n)throw Error(l(425))}function Qr(){}var Yr=null;function Xr(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var qr="function"==typeof setTimeout?setTimeout:void 0,Jr="function"==typeof clearTimeout?clearTimeout:void 0,Zr="function"==typeof Promise?Promise:void 0,ea="function"==typeof queueMicrotask?queueMicrotask:void 0!==Zr?function(e){return Zr.resolve(null).then(e).catch(ta)}:qr;function ta(e){setTimeout((function(){throw e}))}function na(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Ut(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Ut(t)}function ra(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function aa(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var la=Math.random().toString(36).slice(2),ia="__reactFiber$"+la,oa="__reactProps$"+la,sa="__reactContainer$"+la,ca="__reactEvents$"+la,ua="__reactListeners$"+la,da="__reactHandles$"+la;function fa(e){var t=e[ia];if(t)return t;for(var n=e.parentNode;n;){if(t=n[sa]||n[ia]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=aa(e);null!==e;){if(n=e[ia])return n;e=aa(e)}return t}n=(e=n).parentNode}return null}function pa(e){return!(e=e[ia]||e[sa])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ha(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(l(33))}function ga(e){return e[oa]||null}var ma=[],va=-1;function ba(e){return{current:e}}function ya(e){0>va||(e.current=ma[va],ma[va]=null,va--)}function xa(e,t){va++,ma[va]=e.current,e.current=t}var ka={},ja=ba(ka),Ea=ba(!1),wa=ka;function Ta(e,t){var n=e.type.contextTypes;if(!n)return ka;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,l={};for(a in n)l[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=l),l}function Sa(e){return null!=(e=e.childContextTypes)}function Ca(){ya(Ea),ya(ja)}function Oa(e,t,n){if(ja.current!==ka)throw Error(l(168));xa(ja,t),xa(Ea,n)}function Na(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(l(108,V(e)||"Unknown",a));return M({},n,r)}function Ia(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||ka,wa=ja.current,xa(ja,e),xa(Ea,Ea.current),!0}function Ra(e,t,n){var r=e.stateNode;if(!r)throw Error(l(169));n?(e=Na(e,t,wa),r.__reactInternalMemoizedMergedChildContext=e,ya(Ea),ya(ja),xa(ja,e)):ya(Ea),xa(Ea,n)}var Pa=null,Aa=!1,La=!1;function _a(e){null===Pa?Pa=[e]:Pa.push(e)}function Fa(){if(!La&&null!==Pa){La=!0;var e=0,t=bt;try{var n=Pa;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Pa=null,Aa=!1}catch(t){throw null!==Pa&&(Pa=Pa.slice(e+1)),Ke(Ze,Fa),t}finally{bt=t,La=!1}}return null}var Ma=x.ReactCurrentBatchConfig;function Da(e,t){if(e&&e.defaultProps){for(var n in t=M({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var za=ba(null),Ba=null,Ua=null,Ha=null;function Va(){Ha=Ua=Ba=null}function Wa(e){var t=za.current;ya(za),e._currentValue=t}function $a(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ga(e,t){Ba=e,Ha=Ua=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(ho=!0),e.firstContext=null)}function Ka(e){var t=e._currentValue;if(Ha!==e)if(e={context:e,memoizedValue:t,next:null},null===Ua){if(null===Ba)throw Error(l(308));Ua=e,Ba.dependencies={lanes:0,firstContext:e}}else Ua=Ua.next=e;return t}var Qa=null,Ya=!1;function Xa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function qa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ja(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Za(e,t){var n=e.updateQueue;null!==n&&(n=n.shared,null!==gs&&0!=(1&e.mode)&&0==(2&hs)?(null===(e=n.interleaved)?(t.next=t,null===Qa?Qa=[n]:Qa.push(n)):(t.next=e.next,e.next=t),n.interleaved=t):(null===(e=n.pending)?t.next=t:(t.next=e.next,e.next=t),n.pending=t))}function el(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}function tl(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,l=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===l?a=l=i:l=l.next=i,n=n.next}while(null!==n);null===l?a=l=t:l=l.next=t}else a=l=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:l,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function nl(e,t,n,r){var a=e.updateQueue;Ya=!1;var l=a.firstBaseUpdate,i=a.lastBaseUpdate,o=a.shared.pending;if(null!==o){a.shared.pending=null;var s=o,c=s.next;s.next=null,null===i?l=c:i.next=c,i=s;var u=e.alternate;null!==u&&((o=(u=u.updateQueue).lastBaseUpdate)!==i&&(null===o?u.firstBaseUpdate=c:o.next=c,u.lastBaseUpdate=s))}if(null!==l){var d=a.baseState;for(i=0,u=c=s=null,o=l;;){var f=o.lane,p=o.eventTime;if((r&f)===f){null!==u&&(u=u.next={eventTime:p,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});e:{var h=e,g=o;switch(f=t,p=n,g.tag){case 1:if("function"==typeof(h=g.payload)){d=h.call(p,d,f);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(f="function"==typeof(h=g.payload)?h.call(p,d,f):h))break e;d=M({},d,f);break e;case 2:Ya=!0}}null!==o.callback&&0!==o.lane&&(e.flags|=64,null===(f=a.effects)?a.effects=[o]:f.push(o))}else p={eventTime:p,lane:f,tag:o.tag,payload:o.payload,callback:o.callback,next:null},null===u?(c=u=p,s=d):u=u.next=p,i|=f;if(null===(o=o.next)){if(null===(o=a.shared.pending))break;o=(f=o).next,f.next=null,a.lastBaseUpdate=f,a.shared.pending=null}}if(null===u&&(s=d),a.baseState=s,a.firstBaseUpdate=c,a.lastBaseUpdate=u,null!==(t=a.shared.interleaved)){a=t;do{i|=a.lane,a=a.next}while(a!==t)}else null===l&&(a.shared.lanes=0);js|=i,e.lanes=i,e.memoizedState=d}}function rl(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(l(191,a));a.call(r)}}}var al=(new r.Component).refs;function ll(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:M({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var il={isMounted:function(e){return!!(e=e._reactInternals)&&He(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=zs(),a=Bs(e),l=Ja(r,a);l.payload=t,null!=n&&(l.callback=n),Za(e,l),null!==(t=Us(e,a,r))&&el(t,e,a)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=zs(),a=Bs(e),l=Ja(r,a);l.tag=1,l.payload=t,null!=n&&(l.callback=n),Za(e,l),null!==(t=Us(e,a,r))&&el(t,e,a)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=zs(),r=Bs(e),a=Ja(n,r);a.tag=2,null!=t&&(a.callback=t),Za(e,a),null!==(t=Us(e,r,n))&&el(t,e,r)}};function ol(e,t,n,r,a,l,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,l,i):!t.prototype||!t.prototype.isPureReactComponent||(!rr(n,r)||!rr(a,l))}function sl(e,t,n){var r=!1,a=ka,l=t.contextType;return"object"==typeof l&&null!==l?l=Ka(l):(a=Sa(t)?wa:ja.current,l=(r=null!=(r=t.contextTypes))?Ta(e,a):ka),t=new t(n,l),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=il,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=l),t}function cl(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&il.enqueueReplaceState(t,t.state,null)}function ul(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=al,Xa(e);var l=t.contextType;"object"==typeof l&&null!==l?a.context=Ka(l):(l=Sa(t)?wa:ja.current,a.context=Ta(e,l)),a.state=e.memoizedState,"function"==typeof(l=t.getDerivedStateFromProps)&&(ll(e,t,l,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&il.enqueueReplaceState(a,a.state,null),nl(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}var dl=[],fl=0,pl=null,hl=0,gl=[],ml=0,vl=null,bl=1,yl="";function xl(e,t){dl[fl++]=hl,dl[fl++]=pl,pl=e,hl=t}function kl(e,t,n){gl[ml++]=bl,gl[ml++]=yl,gl[ml++]=vl,vl=e;var r=bl;e=yl;var a=32-it(r)-1;r&=~(1<<a),n+=1;var l=32-it(t)+a;if(30<l){var i=a-a%5;l=(r&(1<<i)-1).toString(32),r>>=i,a-=i,bl=1<<32-it(t)+a|n<<a|r,yl=l+e}else bl=1<<l|n<<a|r,yl=e}function jl(e){null!==e.return&&(xl(e,1),kl(e,1,0))}function El(e){for(;e===pl;)pl=dl[--fl],dl[fl]=null,hl=dl[--fl],dl[fl]=null;for(;e===vl;)vl=gl[--ml],gl[ml]=null,yl=gl[--ml],gl[ml]=null,bl=gl[--ml],gl[ml]=null}var wl=null,Tl=null,Sl=!1,Cl=null;function Ol(e,t){var n=vc(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function Nl(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,wl=e,Tl=ra(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,wl=e,Tl=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==vl?{id:bl,overflow:yl}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=vc(18,null,null,0)).stateNode=t,n.return=e,e.child=n,wl=e,Tl=null,!0);default:return!1}}function Il(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function Rl(e){if(Sl){var t=Tl;if(t){var n=t;if(!Nl(e,t)){if(Il(e))throw Error(l(418));t=ra(n.nextSibling);var r=wl;t&&Nl(e,t)?Ol(r,n):(e.flags=-4097&e.flags|2,Sl=!1,wl=e)}}else{if(Il(e))throw Error(l(418));e.flags=-4097&e.flags|2,Sl=!1,wl=e}}}function Pl(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;wl=e}function Al(e){if(e!==wl)return!1;if(!Sl)return Pl(e),Sl=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!Xr(e.type,e.memoizedProps)),t&&(t=Tl)){if(Il(e)){for(e=Tl;e;)e=ra(e.nextSibling);throw Error(l(418))}for(;t;)Ol(e,t),t=ra(t.nextSibling)}if(Pl(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(l(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Tl=ra(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Tl=null}}else Tl=wl?ra(e.stateNode.nextSibling):null;return!0}function Ll(){Tl=wl=null,Sl=!1}function _l(e){null===Cl?Cl=[e]:Cl.push(e)}function Fl(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(l(309));var r=n.stateNode}if(!r)throw Error(l(147,e));var a=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=a.refs;t===al&&(t=a.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw Error(l(284));if(!n._owner)throw Error(l(290,e))}return e}function Ml(e,t){throw e=Object.prototype.toString.call(t),Error(l(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Dl(e){return(0,e._init)(e._payload)}function zl(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=yc(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function o(t){return e&&null===t.alternate&&(t.flags|=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Ec(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function c(e,t,n,r){var l=n.type;return l===E?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===l||"object"==typeof l&&null!==l&&l.$$typeof===P&&Dl(l)===t.type)?((r=a(t,n.props)).ref=Fl(e,t,n),r.return=e,r):((r=xc(n.type,n.key,n.props,null,e.mode,r)).ref=Fl(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=wc(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,l){return null===t||7!==t.tag?((t=kc(n,e.mode,r,l)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Ec(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=xc(t.type,t.key,t.props,null,e.mode,n)).ref=Fl(e,null,t),n.return=e,n;case j:return(t=wc(t,e.mode,n)).return=e,t;case P:return f(e,(0,t._init)(t._payload),n)}if(te(t)||_(t))return(t=kc(t,e.mode,n,null)).return=e,t;Ml(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===a?c(e,t,n,r):null;case j:return n.key===a?u(e,t,n,r):null;case P:return p(e,t,(a=n._init)(n._payload),r)}if(te(n)||_(n))return null!==a?null:d(e,t,n,r,null);Ml(e,n)}return null}function h(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case j:return u(t,e=e.get(null===r.key?n:r.key)||null,r,a);case P:return h(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||_(r))return d(t,e=e.get(n)||null,r,a,null);Ml(t,r)}return null}function g(a,l,o,s){for(var c=null,u=null,d=l,g=l=0,m=null;null!==d&&g<o.length;g++){d.index>g?(m=d,d=null):m=d.sibling;var v=p(a,d,o[g],s);if(null===v){null===d&&(d=m);break}e&&d&&null===v.alternate&&t(a,d),l=i(v,l,g),null===u?c=v:u.sibling=v,u=v,d=m}if(g===o.length)return n(a,d),Sl&&xl(a,g),c;if(null===d){for(;g<o.length;g++)null!==(d=f(a,o[g],s))&&(l=i(d,l,g),null===u?c=d:u.sibling=d,u=d);return Sl&&xl(a,g),c}for(d=r(a,d);g<o.length;g++)null!==(m=h(d,a,g,o[g],s))&&(e&&null!==m.alternate&&d.delete(null===m.key?g:m.key),l=i(m,l,g),null===u?c=m:u.sibling=m,u=m);return e&&d.forEach((function(e){return t(a,e)})),Sl&&xl(a,g),c}function m(a,o,s,c){var u=_(s);if("function"!=typeof u)throw Error(l(150));if(null==(s=u.call(s)))throw Error(l(151));for(var d=u=null,g=o,m=o=0,v=null,b=s.next();null!==g&&!b.done;m++,b=s.next()){g.index>m?(v=g,g=null):v=g.sibling;var y=p(a,g,b.value,c);if(null===y){null===g&&(g=v);break}e&&g&&null===y.alternate&&t(a,g),o=i(y,o,m),null===d?u=y:d.sibling=y,d=y,g=v}if(b.done)return n(a,g),Sl&&xl(a,m),u;if(null===g){for(;!b.done;m++,b=s.next())null!==(b=f(a,b.value,c))&&(o=i(b,o,m),null===d?u=b:d.sibling=b,d=b);return Sl&&xl(a,m),u}for(g=r(a,g);!b.done;m++,b=s.next())null!==(b=h(g,a,m,b.value,c))&&(e&&null!==b.alternate&&g.delete(null===b.key?m:b.key),o=i(b,o,m),null===d?u=b:d.sibling=b,d=b);return e&&g.forEach((function(e){return t(a,e)})),Sl&&xl(a,m),u}return function e(r,l,i,s){if("object"==typeof i&&null!==i&&i.type===E&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case k:e:{for(var c=i.key,u=l;null!==u;){if(u.key===c){if((c=i.type)===E){if(7===u.tag){n(r,u.sibling),(l=a(u,i.props.children)).return=r,r=l;break e}}else if(u.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===P&&Dl(c)===u.type){n(r,u.sibling),(l=a(u,i.props)).ref=Fl(r,u,i),l.return=r,r=l;break e}n(r,u);break}t(r,u),u=u.sibling}i.type===E?((l=kc(i.props.children,r.mode,s,i.key)).return=r,r=l):((s=xc(i.type,i.key,i.props,null,r.mode,s)).ref=Fl(r,l,i),s.return=r,r=s)}return o(r);case j:e:{for(u=i.key;null!==l;){if(l.key===u){if(4===l.tag&&l.stateNode.containerInfo===i.containerInfo&&l.stateNode.implementation===i.implementation){n(r,l.sibling),(l=a(l,i.children||[])).return=r,r=l;break e}n(r,l);break}t(r,l),l=l.sibling}(l=wc(i,r.mode,s)).return=r,r=l}return o(r);case P:return e(r,l,(u=i._init)(i._payload),s)}if(te(i))return g(r,l,i,s);if(_(i))return m(r,l,i,s);Ml(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==l&&6===l.tag?(n(r,l.sibling),(l=a(l,i)).return=r,r=l):(n(r,l),(l=Ec(i,r.mode,s)).return=r,r=l),o(r)):n(r,l)}}var Bl=zl(!0),Ul=zl(!1),Hl={},Vl=ba(Hl),Wl=ba(Hl),$l=ba(Hl);function Gl(e){if(e===Hl)throw Error(l(174));return e}function Kl(e,t){switch(xa($l,t),xa(Wl,e),xa(Vl,Hl),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:se(null,"");break;default:t=se(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ya(Vl),xa(Vl,t)}function Ql(){ya(Vl),ya(Wl),ya($l)}function Yl(e){Gl($l.current);var t=Gl(Vl.current),n=se(t,e.type);t!==n&&(xa(Wl,e),xa(Vl,n))}function Xl(e){Wl.current===e&&(ya(Vl),ya(Wl))}var ql=ba(0);function Jl(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Zl=[];function ei(){for(var e=0;e<Zl.length;e++)Zl[e]._workInProgressVersionPrimary=null;Zl.length=0}var ti=x.ReactCurrentDispatcher,ni=x.ReactCurrentBatchConfig,ri=0,ai=null,li=null,ii=null,oi=!1,si=!1,ci=0,ui=0;function di(){throw Error(l(321))}function fi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!nr(e[n],t[n]))return!1;return!0}function pi(e,t,n,r,a,i){if(ri=i,ai=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ti.current=null===e||null===e.memoizedState?Yi:Xi,e=n(r,a),si){i=0;do{if(si=!1,ci=0,25<=i)throw Error(l(301));i+=1,ii=li=null,t.updateQueue=null,ti.current=qi,e=n(r,a)}while(si)}if(ti.current=Qi,t=null!==li&&null!==li.next,ri=0,ii=li=ai=null,oi=!1,t)throw Error(l(300));return e}function hi(){var e=0!==ci;return ci=0,e}function gi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ii?ai.memoizedState=ii=e:ii=ii.next=e,ii}function mi(){if(null===li){var e=ai.alternate;e=null!==e?e.memoizedState:null}else e=li.next;var t=null===ii?ai.memoizedState:ii.next;if(null!==t)ii=t,li=e;else{if(null===e)throw Error(l(310));e={memoizedState:(li=e).memoizedState,baseState:li.baseState,baseQueue:li.baseQueue,queue:li.queue,next:null},null===ii?ai.memoizedState=ii=e:ii=ii.next=e}return ii}function vi(e,t){return"function"==typeof t?t(e):t}function bi(e){var t=mi(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=li,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var o=a.next;a.next=i.next,i.next=o}r.baseQueue=a=i,n.pending=null}if(null!==a){i=a.next,r=r.baseState;var s=o=null,c=null,u=i;do{var d=u.lane;if((ri&d)===d)null!==c&&(c=c.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:e(r,u.action);else{var f={lane:d,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===c?(s=c=f,o=r):c=c.next=f,ai.lanes|=d,js|=d}u=u.next}while(null!==u&&u!==i);null===c?o=r:c.next=s,nr(r,t.memoizedState)||(ho=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=c,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{i=a.lane,ai.lanes|=i,js|=i,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function yi(e){var t=mi(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var o=a=a.next;do{i=e(i,o.action),o=o.next}while(o!==a);nr(i,t.memoizedState)||(ho=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function xi(){}function ki(e,t){var n=ai,r=mi(),a=t(),i=!nr(r.memoizedState,a);if(i&&(r.memoizedState=a,ho=!0),r=r.queue,Pi(wi.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==ii&&1&ii.memoizedState.tag){if(n.flags|=2048,Ci(9,Ei.bind(null,n,r,a,t),void 0,null),null===gs)throw Error(l(349));0!=(30&ri)||ji(n,t,a)}return a}function ji(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ai.updateQueue)?(t={lastEffect:null,stores:null},ai.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ei(e,t,n,r){t.value=n,t.getSnapshot=r,Ti(t)&&Us(e,1,-1)}function wi(e,t,n){return n((function(){Ti(t)&&Us(e,1,-1)}))}function Ti(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!nr(e,n)}catch(e){return!0}}function Si(e){var t=gi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:vi,lastRenderedState:e},t.queue=e,e=e.dispatch=Vi.bind(null,ai,e),[t.memoizedState,e]}function Ci(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ai.updateQueue)?(t={lastEffect:null,stores:null},ai.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Oi(){return mi().memoizedState}function Ni(e,t,n,r){var a=gi();ai.flags|=e,a.memoizedState=Ci(1|t,n,void 0,void 0===r?null:r)}function Ii(e,t,n,r){var a=mi();r=void 0===r?null:r;var l=void 0;if(null!==li){var i=li.memoizedState;if(l=i.destroy,null!==r&&fi(r,i.deps))return void(a.memoizedState=Ci(t,n,l,r))}ai.flags|=e,a.memoizedState=Ci(1|t,n,l,r)}function Ri(e,t){return Ni(8390656,8,e,t)}function Pi(e,t){return Ii(2048,8,e,t)}function Ai(e,t){return Ii(4,2,e,t)}function Li(e,t){return Ii(4,4,e,t)}function _i(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Fi(e,t,n){return n=null!=n?n.concat([e]):null,Ii(4,4,_i.bind(null,t,e),n)}function Mi(){}function Di(e,t){var n=mi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&fi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function zi(e,t){var n=mi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&fi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Bi(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=ni.transition;ni.transition={};try{e(!1),t()}finally{bt=n,ni.transition=r}}function Ui(){return mi().memoizedState}function Hi(e,t,n){var r=Bs(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Wi(e)?$i(t,n):(Gi(e,t,n),null!==(e=Us(e,r,n=zs()))&&Ki(e,t,r))}function Vi(e,t,n){var r=Bs(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Wi(e))$i(t,a);else{Gi(e,t,a);var l=e.alternate;if(0===e.lanes&&(null===l||0===l.lanes)&&null!==(l=t.lastRenderedReducer))try{var i=t.lastRenderedState,o=l(i,n);if(a.hasEagerState=!0,a.eagerState=o,nr(o,i))return}catch(e){}null!==(e=Us(e,r,n=zs()))&&Ki(e,t,r)}}function Wi(e){var t=e.alternate;return e===ai||null!==t&&t===ai}function $i(e,t){si=oi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Gi(e,t,n){null!==gs&&0!=(1&e.mode)&&0==(2&hs)?(null===(e=t.interleaved)?(n.next=n,null===Qa?Qa=[t]:Qa.push(t)):(n.next=e.next,e.next=n),t.interleaved=n):(null===(e=t.pending)?n.next=n:(n.next=e.next,e.next=n),t.pending=n)}function Ki(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}var Qi={readContext:Ka,useCallback:di,useContext:di,useEffect:di,useImperativeHandle:di,useInsertionEffect:di,useLayoutEffect:di,useMemo:di,useReducer:di,useRef:di,useState:di,useDebugValue:di,useDeferredValue:di,useTransition:di,useMutableSource:di,useSyncExternalStore:di,useId:di,unstable_isNewReconciler:!1},Yi={readContext:Ka,useCallback:function(e,t){return gi().memoizedState=[e,void 0===t?null:t],e},useContext:Ka,useEffect:Ri,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ni(4194308,4,_i.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ni(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ni(4,2,e,t)},useMemo:function(e,t){var n=gi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=gi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Hi.bind(null,ai,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},gi().memoizedState=e},useState:Si,useDebugValue:Mi,useDeferredValue:function(e){var t=Si(e),n=t[0],r=t[1];return Ri((function(){var t=ni.transition;ni.transition={};try{r(e)}finally{ni.transition=t}}),[e]),n},useTransition:function(){var e=Si(!1),t=e[0];return e=Bi.bind(null,e[1]),gi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ai,a=gi();if(Sl){if(void 0===n)throw Error(l(407));n=n()}else{if(n=t(),null===gs)throw Error(l(349));0!=(30&ri)||ji(r,t,n)}a.memoizedState=n;var i={value:n,getSnapshot:t};return a.queue=i,Ri(wi.bind(null,r,i,e),[e]),r.flags|=2048,Ci(9,Ei.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=gi(),t=gs.identifierPrefix;if(Sl){var n=yl;t=":"+t+"R"+(n=(bl&~(1<<32-it(bl)-1)).toString(32)+n),0<(n=ci++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=ui++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},Xi={readContext:Ka,useCallback:Di,useContext:Ka,useEffect:Pi,useImperativeHandle:Fi,useInsertionEffect:Ai,useLayoutEffect:Li,useMemo:zi,useReducer:bi,useRef:Oi,useState:function(){return bi(vi)},useDebugValue:Mi,useDeferredValue:function(e){var t=bi(vi),n=t[0],r=t[1];return Pi((function(){var t=ni.transition;ni.transition={};try{r(e)}finally{ni.transition=t}}),[e]),n},useTransition:function(){return[bi(vi)[0],mi().memoizedState]},useMutableSource:xi,useSyncExternalStore:ki,useId:Ui,unstable_isNewReconciler:!1},qi={readContext:Ka,useCallback:Di,useContext:Ka,useEffect:Pi,useImperativeHandle:Fi,useInsertionEffect:Ai,useLayoutEffect:Li,useMemo:zi,useReducer:yi,useRef:Oi,useState:function(){return yi(vi)},useDebugValue:Mi,useDeferredValue:function(e){var t=yi(vi),n=t[0],r=t[1];return Pi((function(){var t=ni.transition;ni.transition={};try{r(e)}finally{ni.transition=t}}),[e]),n},useTransition:function(){return[yi(vi)[0],mi().memoizedState]},useMutableSource:xi,useSyncExternalStore:ki,useId:Ui,unstable_isNewReconciler:!1};function Ji(e,t){try{var n="",r=t;do{n+=U(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a}}function Zi(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var eo,to,no,ro="function"==typeof WeakMap?WeakMap:Map;function ao(e,t,n){(n=Ja(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ns||(Ns=!0,Is=r),Zi(0,t)},n}function lo(e,t,n){(n=Ja(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){Zi(0,t)}}var l=e.stateNode;return null!==l&&"function"==typeof l.componentDidCatch&&(n.callback=function(){Zi(0,t),"function"!=typeof r&&(null===Rs?Rs=new Set([this]):Rs.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function io(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new ro;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=dc.bind(null,e,t,n),t.then(e,e))}function oo(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function so(e,t,n,r,a){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Ja(-1,1)).tag=2,Za(n,t))),n.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}function co(e,t){if(!Sl)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function uo(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function fo(e,t,n){var r=t.pendingProps;switch(El(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return uo(t),null;case 1:return Sa(t.type)&&Ca(),uo(t),null;case 3:return r=t.stateNode,Ql(),ya(Ea),ya(ja),ei(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Al(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==Cl&&(Gs(Cl),Cl=null))),uo(t),null;case 5:Xl(t);var a=Gl($l.current);if(n=t.type,null!==e&&null!=t.stateNode)to(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(l(166));return uo(t),null}if(e=Gl(Vl.current),Al(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[ia]=t,r[oa]=i,e=0!=(1&t.mode),n){case"dialog":Lr("cancel",r),Lr("close",r);break;case"iframe":case"object":case"embed":Lr("load",r);break;case"video":case"audio":for(a=0;a<Ir.length;a++)Lr(Ir[a],r);break;case"source":Lr("error",r);break;case"img":case"image":case"link":Lr("error",r),Lr("load",r);break;case"details":Lr("toggle",r);break;case"input":X(r,i),Lr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Lr("invalid",r);break;case"textarea":ae(r,i),Lr("invalid",r)}for(var s in be(n,i),a=null,i)if(i.hasOwnProperty(s)){var c=i[s];"children"===s?"string"==typeof c?r.textContent!==c&&(Kr(r.textContent,c,e),a=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(Kr(r.textContent,c,e),a=["children",""+c]):o.hasOwnProperty(s)&&null!=c&&"onScroll"===s&&Lr("scroll",r)}switch(n){case"input":G(r),Z(r,i,!0);break;case"textarea":G(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Qr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{s=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=oe(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[ia]=t,e[oa]=r,eo(e,t),t.stateNode=e;e:{switch(s=ye(n,r),n){case"dialog":Lr("cancel",e),Lr("close",e),a=r;break;case"iframe":case"object":case"embed":Lr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Ir.length;a++)Lr(Ir[a],e);a=r;break;case"source":Lr("error",e),a=r;break;case"img":case"image":case"link":Lr("error",e),Lr("load",e),a=r;break;case"details":Lr("toggle",e),a=r;break;case"input":X(e,r),a=Y(e,r),Lr("invalid",e);break;case"option":a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=M({},r,{value:void 0}),Lr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Lr("invalid",e);break;default:a=r}for(i in be(n,a),c=a)if(c.hasOwnProperty(i)){var u=c[i];"style"===i?me(e,u):"dangerouslySetInnerHTML"===i?null!=(u=u?u.__html:void 0)&&de(e,u):"children"===i?"string"==typeof u?("textarea"!==n||""!==u)&&fe(e,u):"number"==typeof u&&fe(e,""+u):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(o.hasOwnProperty(i)?null!=u&&"onScroll"===i&&Lr("scroll",e):null!=u&&y(e,i,u,s))}switch(n){case"input":G(e),Z(e,r,!1);break;case"textarea":G(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+W(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Qr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return uo(t),null;case 6:if(e&&null!=t.stateNode)no(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(l(166));if(n=Gl($l.current),Gl(Vl.current),Al(t)){if(r=t.stateNode,n=t.memoizedProps,r[ia]=t,(i=r.nodeValue!==n)&&null!==(e=wl))switch(s=0!=(1&e.mode),e.tag){case 3:Kr(r.nodeValue,n,s);break;case 5:!0!==e.memoizedProps[void 0]&&Kr(r.nodeValue,n,s)}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[ia]=t,t.stateNode=r}return uo(t),null;case 13:if(ya(ql),r=t.memoizedState,Sl&&null!==Tl&&0!=(1&t.mode)&&0==(128&t.flags)){for(r=Tl;r;)r=ra(r.nextSibling);return Ll(),t.flags|=98560,t}if(null!==r&&null!==r.dehydrated){if(r=Al(t),null===e){if(!r)throw Error(l(318));if(!(r=null!==(r=t.memoizedState)?r.dehydrated:null))throw Error(l(317));r[ia]=t}else Ll(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;return uo(t),null}return null!==Cl&&(Gs(Cl),Cl=null),0!=(128&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?Al(t):n=null!==e.memoizedState,r&&!n&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ql.current)?0===xs&&(xs=3):tc())),null!==t.updateQueue&&(t.flags|=4),uo(t),null);case 4:return Ql(),null===e&&Mr(t.stateNode.containerInfo),uo(t),null;case 10:return Wa(t.type._context),uo(t),null;case 17:return Sa(t.type)&&Ca(),uo(t),null;case 19:if(ya(ql),null===(i=t.memoizedState))return uo(t),null;if(r=0!=(128&t.flags),null===(s=i.rendering))if(r)co(i,!1);else{if(0!==xs||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(s=Jl(e))){for(t.flags|=128,co(i,!1),null!==(r=s.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(s=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=s.childLanes,i.lanes=s.lanes,i.child=s.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=s.memoizedProps,i.memoizedState=s.memoizedState,i.updateQueue=s.updateQueue,i.type=s.type,e=s.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return xa(ql,1&ql.current|2),t.child}e=e.sibling}null!==i.tail&&qe()>Os&&(t.flags|=128,r=!0,co(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=Jl(s))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),co(i,!0),null===i.tail&&"hidden"===i.tailMode&&!s.alternate&&!Sl)return uo(t),null}else 2*qe()-i.renderingStartTime>Os&&1073741824!==n&&(t.flags|=128,r=!0,co(i,!1),t.lanes=4194304);i.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=i.last)?n.sibling=s:t.child=s,i.last=s)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=qe(),t.sibling=null,n=ql.current,xa(ql,r?1&n|2:1&n),t):(uo(t),null);case 22:case 23:return qs(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&bs)&&(uo(t),6&t.subtreeFlags&&(t.flags|=8192)):uo(t),null;case 24:case 25:return null}throw Error(l(156,t.tag))}eo=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},to=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Gl(Vl.current);var l,i=null;switch(n){case"input":a=Y(e,a),r=Y(e,r),i=[];break;case"select":a=M({},a,{value:void 0}),r=M({},r,{value:void 0}),i=[];break;case"textarea":a=re(e,a),r=re(e,r),i=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Qr)}for(u in be(n,r),n=null,a)if(!r.hasOwnProperty(u)&&a.hasOwnProperty(u)&&null!=a[u])if("style"===u){var s=a[u];for(l in s)s.hasOwnProperty(l)&&(n||(n={}),n[l]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(o.hasOwnProperty(u)?i||(i=[]):(i=i||[]).push(u,null));for(u in r){var c=r[u];if(s=null!=a?a[u]:void 0,r.hasOwnProperty(u)&&c!==s&&(null!=c||null!=s))if("style"===u)if(s){for(l in s)!s.hasOwnProperty(l)||c&&c.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in c)c.hasOwnProperty(l)&&s[l]!==c[l]&&(n||(n={}),n[l]=c[l])}else n||(i||(i=[]),i.push(u,n)),n=c;else"dangerouslySetInnerHTML"===u?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(i=i||[]).push(u,c)):"children"===u?"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(u,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(o.hasOwnProperty(u)?(null!=c&&"onScroll"===u&&Lr("scroll",e),i||s===c||(i=[])):(i=i||[]).push(u,c))}n&&(i=i||[]).push("style",n);var u=i;(t.updateQueue=u)&&(t.flags|=4)}},no=function(e,t,n,r){n!==r&&(t.flags|=4)};var po=x.ReactCurrentOwner,ho=!1;function go(e,t,n,r){t.child=null===e?Ul(t,null,n,r):Bl(t,e.child,n,r)}function mo(e,t,n,r,a){n=n.render;var l=t.ref;return Ga(t,a),r=pi(e,t,n,r,l,a),n=hi(),null===e||ho?(Sl&&n&&jl(t),t.flags|=1,go(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Fo(e,t,a))}function vo(e,t,n,r,a){if(null===e){var l=n.type;return"function"!=typeof l||bc(l)||void 0!==l.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=xc(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=l,bo(e,t,l,r,a))}if(l=e.child,0==(e.lanes&a)){var i=l.memoizedProps;if((n=null!==(n=n.compare)?n:rr)(i,r)&&e.ref===t.ref)return Fo(e,t,a)}return t.flags|=1,(e=yc(l,r)).ref=t.ref,e.return=t,t.child=e}function bo(e,t,n,r,a){if(null!==e&&rr(e.memoizedProps,r)&&e.ref===t.ref){if(ho=!1,0==(e.lanes&a))return t.lanes=e.lanes,Fo(e,t,a);0!=(131072&e.flags)&&(ho=!0)}return ko(e,t,n,r,a)}function yo(e,t,n){var r=t.pendingProps,a=r.children,l=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null},xa(ys,bs),bs|=n;else{if(0==(1073741824&n))return e=null!==l?l.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null},t.updateQueue=null,xa(ys,bs),bs|=e,null;t.memoizedState={baseLanes:0,cachePool:null},r=null!==l?l.baseLanes:n,xa(ys,bs),bs|=r}else null!==l?(r=l.baseLanes|n,t.memoizedState=null):r=n,xa(ys,bs),bs|=r;return go(e,t,a,n),t.child}function xo(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function ko(e,t,n,r,a){var l=Sa(n)?wa:ja.current;return l=Ta(t,l),Ga(t,a),n=pi(e,t,n,r,l,a),r=hi(),null===e||ho?(Sl&&r&&jl(t),t.flags|=1,go(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Fo(e,t,a))}function jo(e,t,n,r,a){if(Sa(n)){var l=!0;Ia(t)}else l=!1;if(Ga(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),sl(t,n,r),ul(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,o=t.memoizedProps;i.props=o;var s=i.context,c=n.contextType;"object"==typeof c&&null!==c?c=Ka(c):c=Ta(t,c=Sa(n)?wa:ja.current);var u=n.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(o!==r||s!==c)&&cl(t,i,r,c),Ya=!1;var f=t.memoizedState;i.state=f,nl(t,r,i,a),s=t.memoizedState,o!==r||f!==s||Ea.current||Ya?("function"==typeof u&&(ll(t,n,u,r),s=t.memoizedState),(o=Ya||ol(t,n,o,r,f,s,c))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),i.props=r,i.state=s,i.context=c,r=o):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,qa(e,t),o=t.memoizedProps,c=t.type===t.elementType?o:Da(t.type,o),i.props=c,d=t.pendingProps,f=i.context,"object"==typeof(s=n.contextType)&&null!==s?s=Ka(s):s=Ta(t,s=Sa(n)?wa:ja.current);var p=n.getDerivedStateFromProps;(u="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(o!==d||f!==s)&&cl(t,i,r,s),Ya=!1,f=t.memoizedState,i.state=f,nl(t,r,i,a);var h=t.memoizedState;o!==d||f!==h||Ea.current||Ya?("function"==typeof p&&(ll(t,n,p,r),h=t.memoizedState),(c=Ya||ol(t,n,c,r,f,h,s)||!1)?(u||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,s)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=s,r=c):("function"!=typeof i.componentDidUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return Eo(e,t,n,r,l,a)}function Eo(e,t,n,r,a,l){xo(e,t);var i=0!=(128&t.flags);if(!r&&!i)return a&&Ra(t,n,!1),Fo(e,t,l);r=t.stateNode,po.current=t;var o=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Bl(t,e.child,null,l),t.child=Bl(t,null,o,l)):go(e,t,o,l),t.memoizedState=r.state,a&&Ra(t,n,!0),t.child}function wo(e){var t=e.stateNode;t.pendingContext?Oa(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Oa(0,t.context,!1),Kl(e,t.containerInfo)}function To(e,t,n,r,a){return Ll(),_l(a),t.flags|=256,go(e,t,n,r),t.child}var So={dehydrated:null,treeContext:null,retryLane:0};function Co(e){return{baseLanes:e,cachePool:null}}function Oo(e,t,n){var r,a=t.pendingProps,i=ql.current,o=!1,s=0!=(128&t.flags);if((r=s)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(o=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),xa(ql,1&i),null===e)return Rl(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(i=a.children,e=a.fallback,o?(a=t.mode,o=t.child,i={mode:"hidden",children:i},0==(1&a)&&null!==o?(o.childLanes=0,o.pendingProps=i):o=jc(i,a,0,null),e=kc(e,a,n,null),o.return=t,e.return=t,o.sibling=e,t.child=o,t.child.memoizedState=Co(n),t.memoizedState=So,e):No(t,i));if(null!==(i=e.memoizedState)){if(null!==(r=i.dehydrated)){if(s)return 256&t.flags?(t.flags&=-257,Po(e,t,n,Error(l(422)))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(o=a.fallback,i=t.mode,a=jc({mode:"visible",children:a.children},i,0,null),(o=kc(o,i,n,null)).flags|=2,a.return=t,o.return=t,a.sibling=o,t.child=a,0!=(1&t.mode)&&Bl(t,e.child,null,n),t.child.memoizedState=Co(n),t.memoizedState=So,o);if(0==(1&t.mode))t=Po(e,t,n,null);else if("$!"===r.data)t=Po(e,t,n,Error(l(419)));else if(a=0!=(n&e.childLanes),ho||a){if(null!==(a=gs)){switch(n&-n){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(a=0!=(o&(a.suspendedLanes|n))?0:o)&&a!==i.retryLane&&(i.retryLane=a,Us(e,a,-1))}tc(),t=Po(e,t,n,Error(l(421)))}else"$?"===r.data?(t.flags|=128,t.child=e.child,t=pc.bind(null,e),r._reactRetry=t,t=null):(n=i.treeContext,Tl=ra(r.nextSibling),wl=t,Sl=!0,Cl=null,null!==n&&(gl[ml++]=bl,gl[ml++]=yl,gl[ml++]=vl,bl=n.id,yl=n.overflow,vl=t),(t=No(t,t.pendingProps.children)).flags|=4096);return t}return o?(a=Ro(e,t,a.children,a.fallback,n),o=t.child,i=e.child.memoizedState,o.memoizedState=null===i?Co(n):{baseLanes:i.baseLanes|n,cachePool:null},o.childLanes=e.childLanes&~n,t.memoizedState=So,a):(n=Io(e,t,a.children,n),t.memoizedState=null,n)}return o?(a=Ro(e,t,a.children,a.fallback,n),o=t.child,i=e.child.memoizedState,o.memoizedState=null===i?Co(n):{baseLanes:i.baseLanes|n,cachePool:null},o.childLanes=e.childLanes&~n,t.memoizedState=So,a):(n=Io(e,t,a.children,n),t.memoizedState=null,n)}function No(e,t){return(t=jc({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Io(e,t,n,r){var a=e.child;return e=a.sibling,n=yc(a,{mode:"visible",children:n}),0==(1&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n}function Ro(e,t,n,r,a){var l=t.mode,i=(e=e.child).sibling,o={mode:"hidden",children:n};return 0==(1&l)&&t.child!==e?((n=t.child).childLanes=0,n.pendingProps=o,t.deletions=null):(n=yc(e,o)).subtreeFlags=14680064&e.subtreeFlags,null!==i?r=yc(i,r):(r=kc(r,l,a,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function Po(e,t,n,r){return null!==r&&_l(r),Bl(t,e.child,null,n),(e=No(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Ao(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),$a(e.return,t,n)}function Lo(e,t,n,r,a){var l=e.memoizedState;null===l?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(l.isBackwards=t,l.rendering=null,l.renderingStartTime=0,l.last=r,l.tail=n,l.tailMode=a)}function _o(e,t,n){var r=t.pendingProps,a=r.revealOrder,l=r.tail;if(go(e,t,r.children,n),0!=(2&(r=ql.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ao(e,n,t);else if(19===e.tag)Ao(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(xa(ql,r),0==(1&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Jl(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Lo(t,!1,a,n,l);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Jl(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Lo(t,!0,n,null,l);break;case"together":Lo(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Fo(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),js|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(l(153));if(null!==t.child){for(n=yc(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=yc(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Mo(e,t){switch(El(t),t.tag){case 1:return Sa(t.type)&&Ca(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Ql(),ya(Ea),ya(ja),ei(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Xl(t),null;case 13:if(ya(ql),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(l(340));Ll()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return ya(ql),null;case 4:return Ql(),null;case 10:return Wa(t.type._context),null;case 22:case 23:return qs(),null;case 24:default:return null}}var Do=!1,zo=!1,Bo="function"==typeof WeakSet?WeakSet:Set,Uo=null;function Ho(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){uc(e,t,n)}else n.current=null}function Vo(e,t,n){try{n()}catch(n){uc(e,t,n)}}var Wo=!1;function $o(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var l=a.destroy;a.destroy=void 0,void 0!==l&&Vo(t,n,l)}a=a.next}while(a!==r)}}function Go(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function Ko(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:e=n;break;default:e=n}"function"==typeof t?t(e):t.current=e}}function Qo(e,t,n){if(lt&&"function"==typeof lt.onCommitFiberUnmount)try{lt.onCommitFiberUnmount(at,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e=e.next;do{var a=r,l=a.destroy;a=a.tag,void 0!==l&&(0!=(2&a)||0!=(4&a))&&Vo(t,n,l),r=r.next}while(r!==e)}break;case 1:if(Ho(t,n),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){uc(t,n,e)}break;case 5:Ho(t,n);break;case 4:ts(e,t,n)}}function Yo(e){var t=e.alternate;null!==t&&(e.alternate=null,Yo(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&(null!==(t=e.stateNode)&&(delete t[ia],delete t[oa],delete t[ca],delete t[ua],delete t[da])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function Xo(e){return 5===e.tag||3===e.tag||4===e.tag}function qo(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||Xo(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function Jo(e){e:{for(var t=e.return;null!==t;){if(Xo(t))break e;t=t.return}throw Error(l(160))}var n=t;switch(n.tag){case 5:t=n.stateNode,32&n.flags&&(fe(t,""),n.flags&=-33),es(e,n=qo(e),t);break;case 3:case 4:t=n.stateNode.containerInfo,Zo(e,n=qo(e),t);break;default:throw Error(l(161))}}function Zo(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Qr));else if(4!==r&&null!==(e=e.child))for(Zo(e,t,n),e=e.sibling;null!==e;)Zo(e,t,n),e=e.sibling}function es(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(es(e,t,n),e=e.sibling;null!==e;)es(e,t,n),e=e.sibling}function ts(e,t,n){for(var r,a,i=t,o=!1;;){if(!o){o=i.return;e:for(;;){if(null===o)throw Error(l(160));switch(r=o.stateNode,o.tag){case 5:a=!1;break e;case 3:case 4:r=r.containerInfo,a=!0;break e}o=o.return}o=!0}if(5===i.tag||6===i.tag){e:for(var s=e,c=i,u=n,d=c;;)if(Qo(s,d,u),null!==d.child&&4!==d.tag)d.child.return=d,d=d.child;else{if(d===c)break e;for(;null===d.sibling;){if(null===d.return||d.return===c)break e;d=d.return}d.sibling.return=d.return,d=d.sibling}a?(s=r,c=i.stateNode,8===s.nodeType?s.parentNode.removeChild(c):s.removeChild(c)):r.removeChild(i.stateNode)}else if(18===i.tag)a?(s=r,c=i.stateNode,8===s.nodeType?na(s.parentNode,c):1===s.nodeType&&na(s,c),Ut(s)):na(r,i.stateNode);else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,a=!0,i.child.return=i,i=i.child;continue}}else if(Qo(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(o=!1)}i.sibling.return=i.return,i=i.sibling}}function ns(e,t){switch(t.tag){case 0:case 11:case 14:case 15:return $o(3,t,t.return),Go(3,t),void $o(5,t,t.return);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,a=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for("input"===e&&"radio"===r.type&&null!=r.name&&q(n,r),ye(e,a),t=ye(e,r),a=0;a<i.length;a+=2){var o=i[a],s=i[a+1];"style"===o?me(n,s):"dangerouslySetInnerHTML"===o?de(n,s):"children"===o?fe(n,s):y(n,o,s,t)}switch(e){case"input":J(n,r);break;case"textarea":le(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ne(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ne(n,!!r.multiple,r.defaultValue,!0):ne(n,!!r.multiple,r.multiple?[]:"",!1))}n[oa]=r}}return;case 6:if(null===t.stateNode)throw Error(l(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void(null!==e&&e.memoizedState.isDehydrated&&Ut(t.stateNode.containerInfo));case 12:return;case 13:case 19:return void rs(t);case 17:return}throw Error(l(163))}function rs(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Bo),t.forEach((function(t){var r=hc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function as(e,t,n){Uo=e,ls(e,t,n)}function ls(e,t,n){for(var r=0!=(1&e.mode);null!==Uo;){var a=Uo,l=a.child;if(22===a.tag&&r){var i=null!==a.memoizedState||Do;if(!i){var o=a.alternate,s=null!==o&&null!==o.memoizedState||zo;o=Do;var c=zo;if(Do=i,(zo=s)&&!c)for(Uo=a;null!==Uo;)s=(i=Uo).child,22===i.tag&&null!==i.memoizedState?ss(a):null!==s?(s.return=i,Uo=s):ss(a);for(;null!==l;)Uo=l,ls(l,t,n),l=l.sibling;Uo=a,Do=o,zo=c}is(e)}else 0!=(8772&a.subtreeFlags)&&null!==l?(l.return=a,Uo=l):is(e)}}function is(e){for(;null!==Uo;){var t=Uo;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:zo||Go(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!zo)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:Da(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&rl(t,i,r);break;case 3:var o=t.updateQueue;if(null!==o){if(n=null,null!==t.child)switch(t.child.tag){case 5:n=t.child.stateNode;break;case 1:n=t.child.stateNode}rl(t,o,n)}break;case 5:var s=t.stateNode;if(null===n&&4&t.flags){n=s;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:break;case 13:if(null===t.memoizedState){var u=t.alternate;if(null!==u){var d=u.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&Ut(f)}}}break;case 19:case 17:case 21:case 22:case 23:break;default:throw Error(l(163))}zo||512&t.flags&&Ko(t)}catch(e){uc(t,t.return,e)}}if(t===e){Uo=null;break}if(null!==(n=t.sibling)){n.return=t.return,Uo=n;break}Uo=t.return}}function os(e){for(;null!==Uo;){var t=Uo;if(t===e){Uo=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Uo=n;break}Uo=t.return}}function ss(e){for(;null!==Uo;){var t=Uo;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{Go(4,t)}catch(e){uc(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){uc(t,a,e)}}var l=t.return;try{Ko(t)}catch(e){uc(t,l,e)}break;case 5:var i=t.return;try{Ko(t)}catch(e){uc(t,i,e)}}}catch(e){uc(t,t.return,e)}if(t===e){Uo=null;break}var o=t.sibling;if(null!==o){o.return=t.return,Uo=o;break}Uo=t.return}}var cs,us=Math.ceil,ds=x.ReactCurrentDispatcher,fs=x.ReactCurrentOwner,ps=x.ReactCurrentBatchConfig,hs=0,gs=null,ms=null,vs=0,bs=0,ys=ba(0),xs=0,ks=null,js=0,Es=0,ws=0,Ts=null,Ss=null,Cs=0,Os=1/0,Ns=!1,Is=null,Rs=null,Ps=!1,As=null,Ls=0,_s=0,Fs=null,Ms=-1,Ds=0;function zs(){return 0!=(6&hs)?qe():-1!==Ms?Ms:Ms=qe()}function Bs(e){return 0==(1&e.mode)?1:0!=(2&hs)&&0!==vs?vs&-vs:null!==Ma.transition?(0===Ds&&(e=ct,0==(4194240&(ct<<=1))&&(ct=64),Ds=e),Ds):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Qt(e.type)}function Us(e,t,n){if(50<_s)throw _s=0,Fs=null,Error(l(185));var r=Hs(e,t);return null===r?null:(mt(r,t,n),0!=(2&hs)&&r===gs||(r===gs&&(0==(2&hs)&&(Es|=t),4===xs&&Ks(r,vs)),Vs(r,n),1===t&&0===hs&&0==(1&e.mode)&&(Os=qe()+500,Aa&&Fa())),r)}function Hs(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function Vs(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var i=31-it(l),o=1<<i,s=a[i];-1===s?0!=(o&n)&&0==(o&r)||(a[i]=pt(o,t)):s<=t&&(e.expiredLanes|=o),l&=~o}}(e,t);var r=ft(e,e===gs?vs:0);if(0===r)null!==n&&Qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Qe(n),1===t)0===e.tag?function(e){Aa=!0,_a(e)}(Qs.bind(null,e)):_a(Qs.bind(null,e)),ea((function(){0===hs&&Fa()})),n=null;else{switch(yt(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:n=tt;break;case 536870912:n=rt;break;default:n=tt}n=gc(n,Ws.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function Ws(e,t){if(Ms=-1,Ds=0,0!=(6&hs))throw Error(l(327));var n=e.callbackNode;if(sc()&&e.callbackNode!==n)return null;var r=ft(e,e===gs?vs:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=nc(e,r);else{t=r;var a=hs;hs|=2;var i=ec();for(gs===e&&vs===t||(Os=qe()+500,Js(e,t));;)try{ac();break}catch(t){Zs(e,t)}Va(),ds.current=i,hs=a,null!==ms?t=0:(gs=null,vs=0,t=xs)}if(0!==t){if(2===t&&(0!==(a=ht(e))&&(r=a,t=$s(e,a))),1===t)throw n=ks,Js(e,0),Ks(e,r),Vs(e,qe()),n;if(6===t)Ks(e,r);else{if(a=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],l=a.getSnapshot;a=a.value;try{if(!nr(l(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)&&(2===(t=nc(e,r))&&(0!==(i=ht(e))&&(r=i,t=$s(e,i))),1===t))throw n=ks,Js(e,0),Ks(e,r),Vs(e,qe()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(l(345));case 2:oc(e,Ss);break;case 3:if(Ks(e,r),(130023424&r)===r&&10<(t=Cs+500-qe())){if(0!==ft(e,0))break;if(((a=e.suspendedLanes)&r)!==r){zs(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=qr(oc.bind(null,e,Ss),t);break}oc(e,Ss);break;case 4:if(Ks(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var o=31-it(r);i=1<<o,(o=t[o])>a&&(a=o),r&=~i}if(r=a,10<(r=(120>(r=qe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*us(r/1960))-r)){e.timeoutHandle=qr(oc.bind(null,e,Ss),r);break}oc(e,Ss);break;case 5:oc(e,Ss);break;default:throw Error(l(329))}}}return Vs(e,qe()),e.callbackNode===n?Ws.bind(null,e):null}function $s(e,t){var n=Ts;return e.current.memoizedState.isDehydrated&&(Js(e,t).flags|=256),2!==(e=nc(e,t))&&(t=Ss,Ss=n,null!==t&&Gs(t)),e}function Gs(e){null===Ss?Ss=e:Ss.push.apply(Ss,e)}function Ks(e,t){for(t&=~ws,t&=~Es,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function Qs(e){if(0!=(6&hs))throw Error(l(327));sc();var t=ft(e,0);if(0==(1&t))return Vs(e,qe()),null;var n=nc(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=$s(e,r))}if(1===n)throw n=ks,Js(e,0),Ks(e,t),Vs(e,qe()),n;if(6===n)throw Error(l(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,oc(e,Ss),Vs(e,qe()),null}function Ys(e,t){var n=hs;hs|=1;try{return e(t)}finally{0===(hs=n)&&(Os=qe()+500,Aa&&Fa())}}function Xs(e){null!==As&&0===As.tag&&0==(6&hs)&&sc();var t=hs;hs|=1;var n=ps.transition,r=bt;try{if(ps.transition=null,bt=1,e)return e()}finally{bt=r,ps.transition=n,0==(6&(hs=t))&&Fa()}}function qs(){bs=ys.current,ya(ys)}function Js(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Jr(n)),null!==ms)for(n=ms.return;null!==n;){var r=n;switch(El(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Ca();break;case 3:Ql(),ya(Ea),ya(ja),ei();break;case 5:Xl(r);break;case 4:Ql();break;case 13:case 19:ya(ql);break;case 10:Wa(r.type._context);break;case 22:case 23:qs()}n=n.return}if(gs=e,ms=e=yc(e.current,null),vs=bs=t,xs=0,ks=null,ws=Es=js=0,Ss=Ts=null,null!==Qa){for(t=0;t<Qa.length;t++)if(null!==(r=(n=Qa[t]).interleaved)){n.interleaved=null;var a=r.next,l=n.pending;if(null!==l){var i=l.next;l.next=a,r.next=i}n.pending=r}Qa=null}return e}function Zs(e,t){for(;;){var n=ms;try{if(Va(),ti.current=Qi,oi){for(var r=ai.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}oi=!1}if(ri=0,ii=li=ai=null,si=!1,ci=0,fs.current=null,null===n||null===n.return){xs=1,ks=t,ms=null;break}e:{var i=e,o=n.return,s=n,c=t;if(t=vs,s.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var u=c,d=s,f=d.tag;if(0==(1&d.mode)&&(0===f||11===f||15===f)){var p=d.alternate;p?(d.updateQueue=p.updateQueue,d.memoizedState=p.memoizedState,d.lanes=p.lanes):(d.updateQueue=null,d.memoizedState=null)}var h=oo(o);if(null!==h){h.flags&=-257,so(h,o,s,0,t),1&h.mode&&io(i,u,t),c=u;var g=(t=h).updateQueue;if(null===g){var m=new Set;m.add(c),t.updateQueue=m}else g.add(c);break e}if(0==(1&t)){io(i,u,t),tc();break e}c=Error(l(426))}else if(Sl&&1&s.mode){var v=oo(o);if(null!==v){0==(65536&v.flags)&&(v.flags|=256),so(v,o,s,0,t),_l(c);break e}}i=c,4!==xs&&(xs=2),null===Ts?Ts=[i]:Ts.push(i),c=Ji(c,s),s=o;do{switch(s.tag){case 3:s.flags|=65536,t&=-t,s.lanes|=t,tl(s,ao(0,c,t));break e;case 1:i=c;var b=s.type,y=s.stateNode;if(0==(128&s.flags)&&("function"==typeof b.getDerivedStateFromError||null!==y&&"function"==typeof y.componentDidCatch&&(null===Rs||!Rs.has(y)))){s.flags|=65536,t&=-t,s.lanes|=t,tl(s,lo(s,i,t));break e}}s=s.return}while(null!==s)}ic(n)}catch(e){t=e,ms===n&&null!==n&&(ms=n=n.return);continue}break}}function ec(){var e=ds.current;return ds.current=Qi,null===e?Qi:e}function tc(){0!==xs&&3!==xs&&2!==xs||(xs=4),null===gs||0==(268435455&js)&&0==(268435455&Es)||Ks(gs,vs)}function nc(e,t){var n=hs;hs|=2;var r=ec();for(gs===e&&vs===t||Js(e,t);;)try{rc();break}catch(t){Zs(e,t)}if(Va(),hs=n,ds.current=r,null!==ms)throw Error(l(261));return gs=null,vs=0,xs}function rc(){for(;null!==ms;)lc(ms)}function ac(){for(;null!==ms&&!Ye();)lc(ms)}function lc(e){var t=cs(e.alternate,e,bs);e.memoizedProps=e.pendingProps,null===t?ic(e):ms=t,fs.current=null}function ic(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=fo(n,t,bs)))return void(ms=n)}else{if(null!==(n=Mo(n,t)))return n.flags&=32767,void(ms=n);if(null===e)return xs=6,void(ms=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(ms=t);ms=t=e}while(null!==t);0===xs&&(xs=5)}function oc(e,t){var n=bt,r=ps.transition;try{ps.transition=null,bt=1,function(e,t,n){do{sc()}while(null!==As);if(0!=(6&hs))throw Error(l(327));var r=e.finishedWork,a=e.finishedLanes;if(null===r)return null;if(e.finishedWork=null,e.finishedLanes=0,r===e.current)throw Error(l(177));e.callbackNode=null,e.callbackPriority=0;var i=r.lanes|r.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-it(n),l=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~l}}(e,i),e===gs&&(ms=gs=null,vs=0),0==(2064&r.subtreeFlags)&&0==(2064&r.flags)||Ps||(Ps=!0,gc(tt,(function(){return sc(),null}))),i=0!=(15990&r.flags),0!=(15990&r.subtreeFlags)||i){i=ps.transition,ps.transition=null;var o=bt;bt=1;var s=hs;hs|=4,fs.current=null,function(e,t){if(sr(e=or())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var o=0,s=-1,c=-1,u=0,d=0,f=e,p=null;t:for(;;){for(var h;f!==n||0!==a&&3!==f.nodeType||(s=o+a),f!==i||0!==r&&3!==f.nodeType||(c=o+r),3===f.nodeType&&(o+=f.nodeValue.length),null!==(h=f.firstChild);)p=f,f=h;for(;;){if(f===e)break t;if(p===n&&++u===a&&(s=o),p===i&&++d===r&&(c=o),null!==(h=f.nextSibling))break;p=(f=p).parentNode}f=h}n=-1===s||-1===c?null:{start:s,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(Yr={focusedElem:e,selectionRange:n},Uo=t;null!==Uo;)if(e=(t=Uo).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Uo=e;else for(;null!==Uo;){t=Uo;try{var g=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:break;case 1:if(null!==g){var m=g.memoizedProps,v=g.memoizedState,b=t.stateNode,y=b.getSnapshotBeforeUpdate(t.elementType===t.type?m:Da(t.type,m),v);b.__reactInternalSnapshotBeforeUpdate=y}break;case 3:var x=t.stateNode.containerInfo;if(1===x.nodeType)x.textContent="";else if(9===x.nodeType){var k=x.body;null!=k&&(k.textContent="")}break;case 5:case 6:case 4:case 17:break;default:throw Error(l(163))}}catch(e){uc(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Uo=e;break}Uo=t.return}g=Wo,Wo=!1}(e,r),function(e,t){for(Uo=t;null!==Uo;){var n=(t=Uo).deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{ts(e,a,t);var l=a.alternate;null!==l&&(l.return=null),a.return=null}catch(e){uc(a,t,e)}}if(n=t.child,0!=(12854&t.subtreeFlags)&&null!==n)n.return=t,Uo=n;else for(;null!==Uo;){t=Uo;try{var i=t.flags;if(32&i&&fe(t.stateNode,""),512&i){var o=t.alternate;if(null!==o){var s=o.ref;null!==s&&("function"==typeof s?s(null):s.current=null)}}if(8192&i)switch(t.tag){case 13:if(null!==t.memoizedState){var c=t.alternate;null!==c&&null!==c.memoizedState||(Cs=qe())}break;case 22:var u=null!==t.memoizedState,d=t.alternate,f=null!==d&&null!==d.memoizedState;e:{a=u;for(var p=null,h=r=n=t;;){if(5===h.tag){if(null===p){p=h;var g=h.stateNode;if(a){var m=g.style;"function"==typeof m.setProperty?m.setProperty("display","none","important"):m.display="none"}else{var v=h.stateNode,b=h.memoizedProps.style,y=null!=b&&b.hasOwnProperty("display")?b.display:null;v.style.display=ge("display",y)}}}else if(6===h.tag)null===p&&(h.stateNode.nodeValue=a?"":h.memoizedProps);else if((22!==h.tag&&23!==h.tag||null===h.memoizedState||h===r)&&null!==h.child){h.child.return=h,h=h.child;continue}if(h===r)break;for(;null===h.sibling;){if(null===h.return||h.return===r)break e;p===h&&(p=null),h=h.return}p===h&&(p=null),h.sibling.return=h.return,h=h.sibling}}if(u&&!f&&0!=(1&n.mode)){Uo=n;for(var x=n.child;null!==x;){for(n=Uo=x;null!==Uo;){var k=(r=Uo).child;switch(r.tag){case 0:case 11:case 14:case 15:$o(4,r,r.return);break;case 1:Ho(r,r.return);var j=r.stateNode;if("function"==typeof j.componentWillUnmount){var E=r.return;try{j.props=r.memoizedProps,j.state=r.memoizedState,j.componentWillUnmount()}catch(e){uc(r,E,e)}}break;case 5:Ho(r,r.return);break;case 22:if(null!==r.memoizedState){os(n);continue}}null!==k?(k.return=r,Uo=k):os(n)}x=x.sibling}}}switch(4102&i){case 2:Jo(t),t.flags&=-3;break;case 6:Jo(t),t.flags&=-3,ns(t.alternate,t);break;case 4096:t.flags&=-4097;break;case 4100:t.flags&=-4097,ns(t.alternate,t);break;case 4:ns(t.alternate,t)}}catch(e){uc(t,t.return,e)}if(null!==(n=t.sibling)){n.return=t.return,Uo=n;break}Uo=t.return}}}(e,r),cr(Yr),Yr=null,e.current=r,as(r,e,a),Xe(),hs=s,bt=o,ps.transition=i}else e.current=r;if(Ps&&(Ps=!1,As=e,Ls=a),0===(i=e.pendingLanes)&&(Rs=null),function(e){if(lt&&"function"==typeof lt.onCommitFiberRoot)try{lt.onCommitFiberRoot(at,e,void 0,128==(128&e.current.flags))}catch(e){}}(r.stateNode),Vs(e,qe()),null!==t)for(n=e.onRecoverableError,r=0;r<t.length;r++)n(t[r]);if(Ns)throw Ns=!1,e=Is,Is=null,e;0!=(1&Ls)&&0!==e.tag&&sc(),0!=(1&(i=e.pendingLanes))?e===Fs?_s++:(_s=0,Fs=e):_s=0,Fa()}(e,t,n)}finally{ps.transition=r,bt=n}return null}function sc(){if(null!==As){var e=yt(Ls),t=ps.transition,n=bt;try{if(ps.transition=null,bt=16>e?16:e,null===As)var r=!1;else{if(e=As,As=null,Ls=0,0!=(6&hs))throw Error(l(331));var a=hs;for(hs|=4,Uo=e.current;null!==Uo;){var i=Uo,o=i.child;if(0!=(16&Uo.flags)){var s=i.deletions;if(null!==s){for(var c=0;c<s.length;c++){var u=s[c];for(Uo=u;null!==Uo;){var d=Uo;switch(d.tag){case 0:case 11:case 15:$o(8,d,i)}var f=d.child;if(null!==f)f.return=d,Uo=f;else for(;null!==Uo;){var p=(d=Uo).sibling,h=d.return;if(Yo(d),d===u){Uo=null;break}if(null!==p){p.return=h,Uo=p;break}Uo=h}}}var g=i.alternate;if(null!==g){var m=g.child;if(null!==m){g.child=null;do{var v=m.sibling;m.sibling=null,m=v}while(null!==m)}}Uo=i}}if(0!=(2064&i.subtreeFlags)&&null!==o)o.return=i,Uo=o;else e:for(;null!==Uo;){if(0!=(2048&(i=Uo).flags))switch(i.tag){case 0:case 11:case 15:$o(9,i,i.return)}var b=i.sibling;if(null!==b){b.return=i.return,Uo=b;break e}Uo=i.return}}var y=e.current;for(Uo=y;null!==Uo;){var x=(o=Uo).child;if(0!=(2064&o.subtreeFlags)&&null!==x)x.return=o,Uo=x;else e:for(o=y;null!==Uo;){if(0!=(2048&(s=Uo).flags))try{switch(s.tag){case 0:case 11:case 15:Go(9,s)}}catch(e){uc(s,s.return,e)}if(s===o){Uo=null;break e}var k=s.sibling;if(null!==k){k.return=s.return,Uo=k;break e}Uo=s.return}}if(hs=a,Fa(),lt&&"function"==typeof lt.onPostCommitFiberRoot)try{lt.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{bt=n,ps.transition=t}}return!1}function cc(e,t,n){Za(e,t=ao(0,t=Ji(n,t),1)),t=zs(),null!==(e=Hs(e,1))&&(mt(e,1,t),Vs(e,t))}function uc(e,t,n){if(3===e.tag)cc(e,e,n);else for(;null!==t;){if(3===t.tag){cc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Rs||!Rs.has(r))){Za(t,e=lo(t,e=Ji(n,e),1)),e=zs(),null!==(t=Hs(t,1))&&(mt(t,1,e),Vs(t,e));break}}t=t.return}}function dc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=zs(),e.pingedLanes|=e.suspendedLanes&n,gs===e&&(vs&n)===n&&(4===xs||3===xs&&(130023424&vs)===vs&&500>qe()-Cs?Js(e,0):ws|=n),Vs(e,t)}function fc(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ut,0==(130023424&(ut<<=1))&&(ut=4194304)));var n=zs();null!==(e=Hs(e,t))&&(mt(e,t,n),Vs(e,n))}function pc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),fc(e,n)}function hc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(l(314))}null!==r&&r.delete(t),fc(e,n)}function gc(e,t){return Ke(e,t)}function mc(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function vc(e,t,n,r){return new mc(e,t,n,r)}function bc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function yc(e,t){var n=e.alternate;return null===n?((n=vc(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function xc(e,t,n,r,a,i){var o=2;if(r=e,"function"==typeof e)bc(e)&&(o=1);else if("string"==typeof e)o=5;else e:switch(e){case E:return kc(n.children,a,i,t);case w:o=8,a|=8;break;case T:return(e=vc(12,n,t,2|a)).elementType=T,e.lanes=i,e;case N:return(e=vc(13,n,t,a)).elementType=N,e.lanes=i,e;case I:return(e=vc(19,n,t,a)).elementType=I,e.lanes=i,e;case A:return jc(n,a,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case S:o=10;break e;case C:o=9;break e;case O:o=11;break e;case R:o=14;break e;case P:o=16,r=null;break e}throw Error(l(130,null==e?e:typeof e,""))}return(t=vc(o,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function kc(e,t,n,r){return(e=vc(7,e,r,t)).lanes=n,e}function jc(e,t,n,r){return(e=vc(22,e,r,t)).elementType=A,e.lanes=n,e.stateNode={},e}function Ec(e,t,n){return(e=vc(6,e,null,t)).lanes=n,e}function wc(e,t,n){return(t=vc(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Tc(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Sc(e,t,n,r,a,l,i,o,s){return e=new Tc(e,t,n,o,s),1===t?(t=1,!0===l&&(t|=8)):t=0,l=vc(3,null,null,t),e.current=l,l.stateNode=e,l.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null},Xa(l),e}function Cc(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:j,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Oc(e){if(!e)return ka;e:{if(He(e=e._reactInternals)!==e||1!==e.tag)throw Error(l(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Sa(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(l(171))}if(1===e.tag){var n=e.type;if(Sa(n))return Na(e,n,t)}return t}function Nc(e,t,n,r,a,l,i,o,s){return(e=Sc(n,r,!0,e,0,l,0,o,s)).context=Oc(null),n=e.current,(l=Ja(r=zs(),a=Bs(n))).callback=null!=t?t:null,Za(n,l),e.current.lanes=a,mt(e,a,r),Vs(e,r),e}function Ic(e,t,n,r){var a=t.current,l=zs(),i=Bs(a);return n=Oc(n),null===t.context?t.context=n:t.pendingContext=n,(t=Ja(l,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),Za(a,t),null!==(e=Us(a,i,l))&&el(e,a,i),i}function Rc(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Pc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ac(e,t){Pc(e,t),(e=e.alternate)&&Pc(e,t)}cs=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Ea.current)ho=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return ho=!1,function(e,t,n){switch(t.tag){case 3:wo(t),Ll();break;case 5:Yl(t);break;case 1:Sa(t.type)&&Ia(t);break;case 4:Kl(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;xa(za,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(xa(ql,1&ql.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Oo(e,t,n):(xa(ql,1&ql.current),null!==(e=Fo(e,t,n))?e.sibling:null);xa(ql,1&ql.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return _o(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),xa(ql,ql.current),r)break;return null;case 22:case 23:return t.lanes=0,yo(e,t,n)}return Fo(e,t,n)}(e,t,n);ho=0!=(131072&e.flags)}else ho=!1,Sl&&0!=(1048576&t.flags)&&kl(t,hl,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps;var a=Ta(t,ja.current);Ga(t,n),a=pi(null,t,r,e,a,n);var i=hi();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Sa(r)?(i=!0,Ia(t)):i=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Xa(t),a.updater=il,t.stateNode=a,a._reactInternals=t,ul(t,r,e,n),t=Eo(null,t,r,!0,i,n)):(t.tag=0,Sl&&i&&jl(t),go(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return bc(e)?1:0;if(null!=e){if((e=e.$$typeof)===O)return 11;if(e===R)return 14}return 2}(r),e=Da(r,e),a){case 0:t=ko(null,t,r,e,n);break e;case 1:t=jo(null,t,r,e,n);break e;case 11:t=mo(null,t,r,e,n);break e;case 14:t=vo(null,t,r,Da(r.type,e),n);break e}throw Error(l(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,ko(e,t,r,a=t.elementType===r?a:Da(r,a),n);case 1:return r=t.type,a=t.pendingProps,jo(e,t,r,a=t.elementType===r?a:Da(r,a),n);case 3:e:{if(wo(t),null===e)throw Error(l(387));r=t.pendingProps,a=(i=t.memoizedState).element,qa(e,t),nl(t,r,null,n);var o=t.memoizedState;if(r=o.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:o.cache,transitions:o.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=To(e,t,r,n,a=Error(l(423)));break e}if(r!==a){t=To(e,t,r,n,a=Error(l(424)));break e}for(Tl=ra(t.stateNode.containerInfo.firstChild),wl=t,Sl=!0,Cl=null,n=Ul(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(Ll(),r===a){t=Fo(e,t,n);break e}go(e,t,r,n)}t=t.child}return t;case 5:return Yl(t),null===e&&Rl(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,o=a.children,Xr(r,a)?o=null:null!==i&&Xr(r,i)&&(t.flags|=32),xo(e,t),go(e,t,o,n),t.child;case 6:return null===e&&Rl(t),null;case 13:return Oo(e,t,n);case 4:return Kl(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Bl(t,null,r,n):go(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,mo(e,t,r,a=t.elementType===r?a:Da(r,a),n);case 7:return go(e,t,t.pendingProps,n),t.child;case 8:case 12:return go(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,i=t.memoizedProps,o=a.value,xa(za,r._currentValue),r._currentValue=o,null!==i)if(nr(i.value,o)){if(i.children===a.children&&!Ea.current){t=Fo(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var s=i.dependencies;if(null!==s){o=i.child;for(var c=s.firstContext;null!==c;){if(c.context===r){if(1===i.tag){(c=Ja(-1,n&-n)).tag=2;var u=i.updateQueue;if(null!==u){var d=(u=u.shared).pending;null===d?c.next=c:(c.next=d.next,d.next=c),u.pending=c}}i.lanes|=n,null!==(c=i.alternate)&&(c.lanes|=n),$a(i.return,n,t),s.lanes|=n;break}c=c.next}}else if(10===i.tag)o=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(o=i.return))throw Error(l(341));o.lanes|=n,null!==(s=o.alternate)&&(s.lanes|=n),$a(o,n,t),o=i.sibling}else o=i.child;if(null!==o)o.return=i;else for(o=i;null!==o;){if(o===t){o=null;break}if(null!==(i=o.sibling)){i.return=o.return,o=i;break}o=o.return}i=o}go(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,Ga(t,n),r=r(a=Ka(a)),t.flags|=1,go(e,t,r,n),t.child;case 14:return a=Da(r=t.type,t.pendingProps),vo(e,t,r,a=Da(r.type,a),n);case 15:return bo(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:Da(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,Sa(r)?(e=!0,Ia(t)):e=!1,Ga(t,n),sl(t,r,a),ul(t,r,a,n),Eo(null,t,r,!0,e,n);case 19:return _o(e,t,n);case 22:return yo(e,t,n)}throw Error(l(156,t.tag))};var Lc="function"==typeof reportError?reportError:function(e){console.error(e)};function _c(e){this._internalRoot=e}function Fc(e){this._internalRoot=e}function Mc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Dc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function zc(){}function Bc(e,t,n,r,a){var l=n._reactRootContainer;if(l){var i=l;if("function"==typeof a){var o=a;a=function(){var e=Rc(i);o.call(e)}}Ic(t,i,e,a)}else i=function(e,t,n,r,a){if(a){if("function"==typeof r){var l=r;r=function(){var e=Rc(i);l.call(e)}}var i=Nc(t,r,e,0,null,!1,0,"",zc);return e._reactRootContainer=i,e[sa]=i.current,Mr(8===e.nodeType?e.parentNode:e),Xs(),i}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var o=r;r=function(){var e=Rc(s);o.call(e)}}var s=Sc(e,0,!1,null,0,!1,0,"",zc);return e._reactRootContainer=s,e[sa]=s.current,Mr(8===e.nodeType?e.parentNode:e),Xs((function(){Ic(t,s,n,r)})),s}(n,t,e,a,r);return Rc(i)}Fc.prototype.render=_c.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(l(409));Ic(e,t,null,null)},Fc.prototype.unmount=_c.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;Xs((function(){Ic(null,e,null,null)})),t[sa]=null}},Fc.prototype.unstable_scheduleHydration=function(e){if(e){var t=Et();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Pt.length&&0!==t&&t<Pt[n].priority;n++);Pt.splice(n,0,e),0===n&&Ft(e)}},xt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(vt(t,1|n),Vs(t,qe()),0==(6&hs)&&(Os=qe()+500,Fa()))}break;case 13:var r=zs();Xs((function(){return Us(e,1,r)})),Ac(e,1)}},kt=function(e){13===e.tag&&(Us(e,134217728,zs()),Ac(e,134217728))},jt=function(e){if(13===e.tag){var t=zs(),n=Bs(e);Us(e,n,t),Ac(e,n)}},Et=function(){return bt},wt=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},je=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=ga(r);if(!a)throw Error(l(90));K(r),J(r,a)}}}break;case"textarea":le(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Oe=Ys,Ne=Xs;var Uc={usingClientEntryPoint:!1,Events:[pa,ha,ga,Se,Ce,Ys]},Hc={findFiberByHostInstance:fa,bundleType:0,version:"18.0.0-fc46dba67-20220329",rendererPackageName:"react-dom"},Vc={bundleType:Hc.bundleType,version:Hc.version,rendererPackageName:Hc.rendererPackageName,rendererConfig:Hc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:x.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=$e(e))?null:e.stateNode},findFiberByHostInstance:Hc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.0.0-fc46dba67-20220329"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Wc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Wc.isDisabled&&Wc.supportsFiber)try{at=Wc.inject(Vc),lt=Wc}catch(ue){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Uc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Mc(t))throw Error(l(200));return Cc(e,t,null,n)},t.createRoot=function(e,t){if(!Mc(e))throw Error(l(299));var n=!1,r="",a=Lc;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=Sc(e,1,!1,null,0,n,0,r,a),e[sa]=t.current,Mr(8===e.nodeType?e.parentNode:e),new _c(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(l(188));throw e=Object.keys(e).join(","),Error(l(268,e))}return e=null===(e=$e(t))?null:e.stateNode},t.flushSync=function(e){return Xs(e)},t.hydrate=function(e,t,n){if(!Dc(t))throw Error(l(200));return Bc(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Mc(e))throw Error(l(405));var r=null!=n&&n.hydratedSources||null,a=!1,i="",o=Lc;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(o=n.onRecoverableError)),t=Nc(t,null,e,1,null!=n?n:null,a,0,i,o),e[sa]=t.current,Mr(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Fc(t)},t.render=function(e,t,n){if(!Dc(t))throw Error(l(200));return Bc(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Dc(e))throw Error(l(40));return!!e._reactRootContainer&&(Xs((function(){Bc(null,null,e,!1,(function(){e._reactRootContainer=null,e[sa]=null}))})),!0)},t.unstable_batchedUpdates=Ys,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Dc(n))throw Error(l(200));if(null==e||void 0===e._reactInternals)throw Error(l(38));return Bc(e,t,n,!1,r)},t.version="18.0.0-fc46dba67-20220329"},745:(e,t,n)=>{var r=n(935);t.s=r.createRoot,r.hydrateRoot},935:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},251:(e,t,n)=>{var r=n(294),a=Symbol.for("react.element"),l=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,o=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,s={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var r,l={},c=null,u=null;for(r in void 0!==n&&(c=""+n),void 0!==t.key&&(c=""+t.key),void 0!==t.ref&&(u=t.ref),t)i.call(t,r)&&!s.hasOwnProperty(r)&&(l[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===l[r]&&(l[r]=t[r]);return{$$typeof:a,type:e,key:c,ref:u,props:l,_owner:o.current}}t.Fragment=l,t.jsx=c,t.jsxs=c},408:(e,t)=>{var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),l=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),o=Symbol.for("react.provider"),s=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator;var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g=Object.assign,m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function b(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=v.prototype;var x=y.prototype=new b;x.constructor=y,g(x,v.prototype),x.isPureReactComponent=!0;var k=Array.isArray,j=Object.prototype.hasOwnProperty,E={current:null},w={key:!0,ref:!0,__self:!0,__source:!0};function T(e,t,r){var a,l={},i=null,o=null;if(null!=t)for(a in void 0!==t.ref&&(o=t.ref),void 0!==t.key&&(i=""+t.key),t)j.call(t,a)&&!w.hasOwnProperty(a)&&(l[a]=t[a]);var s=arguments.length-2;if(1===s)l.children=r;else if(1<s){for(var c=Array(s),u=0;u<s;u++)c[u]=arguments[u+2];l.children=c}if(e&&e.defaultProps)for(a in s=e.defaultProps)void 0===l[a]&&(l[a]=s[a]);return{$$typeof:n,type:e,key:i,ref:o,props:l,_owner:E.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var C=/\/+/g;function O(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function N(e,t,a,l,i){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var s=!1;if(null===e)s=!0;else switch(o){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case n:case r:s=!0}}if(s)return i=i(s=e),e=""===l?"."+O(s,0):l,k(i)?(a="",null!=e&&(a=e.replace(C,"$&/")+"/"),N(i,t,a,"",(function(e){return e}))):null!=i&&(S(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||s&&s.key===i.key?"":(""+i.key).replace(C,"$&/")+"/")+e)),t.push(i)),1;if(s=0,l=""===l?".":l+":",k(e))for(var c=0;c<e.length;c++){var u=l+O(o=e[c],c);s+=N(o,t,a,u,i)}else if("function"==typeof(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e)))for(e=u.call(e),c=0;!(o=e.next()).done;)s+=N(o=o.value,t,a,u=l+O(o,c++),i);else if("object"===o)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return s}function I(e,t,n){if(null==e)return e;var r=[],a=0;return N(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function R(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var P={current:null},A={transition:null},L={ReactCurrentDispatcher:P,ReactCurrentBatchConfig:A,ReactCurrentOwner:E};t.Children={map:I,forEach:function(e,t,n){I(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return I(e,(function(){t++})),t},toArray:function(e){return I(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=a,t.Profiler=i,t.PureComponent=y,t.StrictMode=l,t.Suspense=u,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=g({},e.props),l=e.key,i=e.ref,o=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,o=E.current),void 0!==t.key&&(l=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)j.call(t,c)&&!w.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=r;else if(1<c){s=Array(c);for(var u=0;u<c;u++)s[u]=arguments[u+2];a.children=s}return{$$typeof:n,type:e.type,key:l,ref:i,props:a,_owner:o}},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:o,_context:e},e.Consumer=e},t.createElement=T,t.createFactory=function(e){var t=T.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:R}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=A.transition;A.transition={};try{e()}finally{A.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return P.current.useCallback(e,t)},t.useContext=function(e){return P.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return P.current.useDeferredValue(e)},t.useEffect=function(e,t){return P.current.useEffect(e,t)},t.useId=function(){return P.current.useId()},t.useImperativeHandle=function(e,t,n){return P.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return P.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return P.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return P.current.useMemo(e,t)},t.useReducer=function(e,t,n){return P.current.useReducer(e,t,n)},t.useRef=function(e){return P.current.useRef(e)},t.useState=function(e){return P.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return P.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return P.current.useTransition()},t.version="18.0.0-fc46dba67-20220329"},294:(e,t,n)=>{e.exports=n(408)},893:(e,t,n)=>{e.exports=n(251)},53:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<l(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var o=2*(r+1)-1,s=e[o],c=o+1,u=e[c];if(0>l(s,n))c<a&&0>l(u,s)?(e[r]=u,e[c]=n,r=c):(e[r]=s,e[o]=n,r=o);else{if(!(c<a&&0>l(u,n)))break e;e[r]=u,e[c]=n,r=c}}}return t}function l(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var o=Date,s=o.now();t.unstable_now=function(){return o.now()-s}}var c=[],u=[],d=1,f=null,p=3,h=!1,g=!1,m=!1,v="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,y="undefined"!=typeof setImmediate?setImmediate:null;function x(e){for(var t=r(u);null!==t;){if(null===t.callback)a(u);else{if(!(t.startTime<=e))break;a(u),t.sortIndex=t.expirationTime,n(c,t)}t=r(u)}}function k(e){if(m=!1,x(e),!g)if(null!==r(c))g=!0,A(j);else{var t=r(u);null!==t&&L(k,t.startTime-e)}}function j(e,n){g=!1,m&&(m=!1,b(S),S=-1),h=!0;var l=p;try{for(x(n),f=r(c);null!==f&&(!(f.expirationTime>n)||e&&!N());){var i=f.callback;if("function"==typeof i){f.callback=null,p=f.priorityLevel;var o=i(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof o?f.callback=o:f===r(c)&&a(c),x(n)}else a(c);f=r(c)}if(null!==f)var s=!0;else{var d=r(u);null!==d&&L(k,d.startTime-n),s=!1}return s}finally{f=null,p=l,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var E,w=!1,T=null,S=-1,C=5,O=-1;function N(){return!(t.unstable_now()-O<C)}function I(){if(null!==T){var e=t.unstable_now();O=e;var n=!0;try{n=T(!0,e)}finally{n?E():(w=!1,T=null)}}else w=!1}if("function"==typeof y)E=function(){y(I)};else if("undefined"!=typeof MessageChannel){var R=new MessageChannel,P=R.port2;R.port1.onmessage=I,E=function(){P.postMessage(null)}}else E=function(){v(I,0)};function A(e){T=e,w||(w=!0,E())}function L(e,n){S=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){g||h||(g=!0,A(j))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):C=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(c)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,l){var i=t.unstable_now();switch("object"==typeof l&&null!==l?l="number"==typeof(l=l.delay)&&0<l?i+l:i:l=i,e){case 1:var o=-1;break;case 2:o=250;break;case 5:o=1073741823;break;case 4:o=1e4;break;default:o=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:l,expirationTime:o=l+o,sortIndex:-1},l>i?(e.sortIndex=l,n(u,e),null===r(c)&&e===r(u)&&(m?(b(S),S=-1):m=!0,L(k,l-i))):(e.sortIndex=o,n(c,e),g||h||(g=!0,A(j))),e},t.unstable_shouldYield=N,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:(e,t,n)=>{e.exports=n(53)}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var l=r[e]={exports:{}};return n[e](l,l.exports,a),l.exports}a.m=n,a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.f={},a.e=e=>Promise.all(Object.keys(a.f).reduce(((t,n)=>(a.f[n](e,t),t)),[])),a.u=e=>e+".index.js",a.miniCssF=e=>"css/"+(901===e?"sdktest":e)+".css",a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="mp_webgl:",a.l=(n,r,l,i)=>{if(e[n])e[n].push(r);else{var o,s;if(void 0!==l)for(var c=document.getElementsByTagName("script"),u=0;u<c.length;u++){var d=c[u];if(d.getAttribute("src")==n||d.getAttribute("data-webpack")==t+l){o=d;break}}o||(s=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,a.nc&&o.setAttribute("nonce",a.nc),o.setAttribute("data-webpack",t+l),o.src=n),e[n]=[r];var f=(t,r)=>{o.onerror=o.onload=null,clearTimeout(p);var a=e[n];if(delete e[n],o.parentNode&&o.parentNode.removeChild(o),a&&a.forEach((e=>e(r))),t)return t(r)},p=setTimeout(f.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=f.bind(null,o.onerror),o.onload=f.bind(null,o.onload),s&&document.head.appendChild(o)}},a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;a.g.importScripts&&(e=a.g.location+"");var t=a.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=e})(),(()=>{var e={901:0};a.f.j=(t,n)=>{var r=a.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var l=new Promise(((n,a)=>r=e[t]=[n,a]));n.push(r[2]=l);var i=a.p+a.u(t),o=new Error;a.l(i,(n=>{if(a.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var l=n&&("load"===n.type?"missing":n.type),i=n&&n.target&&n.target.src;o.message="Loading chunk "+t+" failed.\n("+l+": "+i+")",o.name="ChunkLoadError",o.type=l,o.request=i,r[1](o)}}),"chunk-"+t,t)}};var t=(t,n)=>{var r,l,[i,o,s]=n,c=0;if(i.some((t=>0!==e[t]))){for(r in o)a.o(o,r)&&(a.m[r]=o[r]);if(s)s(a)}for(t&&t(n);c<i.length;c++)l=i[c],a.o(e,l)&&e[l]&&e[l][0](),e[l]=0},n=self.webpackChunkmp_webgl=self.webpackChunkmp_webgl||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),(()=>{var e=document.getElementById("filter-panels");e.addEventListener("keyup",(t=>{const n=document.getElementsByClassName("controlPanelHeader");for(const t of n)!e.value||t.textContent.match(new RegExp("".concat(e.value),"i"))?t.parentElement.style.display="block":t.parentElement.style.display="none"}));var t=document.getElementById("status");function n(e,n){var r=n||"";t.className="Error: "===e?"error":"",document.querySelector("#status span").textContent=e+n,"Error: "===e&&console.warn(r)}function r(e){n("Error: ",e)}function l(e){n("OK: ",e)}function i(){n("Working ...")}function o(e){for(;e.lastChild;)e.removeChild(e.lastChild)}function s(e,t){console.log("SHOWCASE IS CONNECTED"),function(e){const t=document.getElementById("mattertag-selector");(function(e,t){var n={},r=document.getElementById("tag-lock-bb"),a=document.getElementById("tag-lock-nav");function l(){var e=n[t.value];return e||(e={billboard:!0,navigation:!0}),n[t.value]=e,e}function i(){var n=l();n.billboard=r.checked,n.navigation=a.checked,e.Mattertag.preventAction(t.value,{opening:!n.billboard,navigating:!n.navigation})}t.addEventListener("change",(function(){var e=l();r.checked=e.billboard,a.checked=e.navigation})),r.addEventListener("change",i),a.addEventListener("change",i)})(e,t),document.getElementById("tag-add").addEventListener("click",function(){const t=document.getElementById("tag-add-title"),n=document.getElementById("tag-add-desc"),r=document.getElementById("tag-add-pos-x"),a=document.getElementById("tag-add-pos-y"),l=document.getElementById("tag-add-pos-z"),i=document.getElementById("tag-add-norm-x"),o=document.getElementById("tag-add-norm-y"),s=document.getElementById("tag-add-norm-z"),c=document.getElementById("tag-add-mtype"),u=document.getElementById("tag-add-msrc");return function(){e.Mattertag.add({label:t.value,description:n.value,anchorPosition:{x:parseFloat(r.value),y:parseFloat(a.value),z:parseFloat(l.value)},stemVector:{x:parseFloat(i.value),y:parseFloat(o.value),z:parseFloat(s.value)},media:""===c.value?void 0:{type:c.value,src:u.value}})}}()),document.getElementById("tag-move").addEventListener("click",function(){const n=document.getElementById("tag-move-pos-x"),r=document.getElementById("tag-move-pos-y"),a=document.getElementById("tag-move-pos-z"),l=document.getElementById("tag-move-norm-x"),i=document.getElementById("tag-move-norm-y"),o=document.getElementById("tag-move-norm-z");return function(){e.Mattertag.editPosition(t.value,{anchorPosition:{x:parseFloat(n.value),y:parseFloat(r.value),z:parseFloat(a.value)},stemVector:{x:parseFloat(l.value),y:parseFloat(i.value),z:parseFloat(o.value)}})}}()),document.getElementById("mattertag-remove").addEventListener("click",(function(){e.Mattertag.remove(t.value)}));var n=document.getElementsByClassName("mtag-media-type");for(const t of n){o(t);var a=document.createElement("option");for(var s in a.value="",a.text="(select)",t.appendChild(a),e.Mattertag.MediaType){var c=document.createElement("option");c.value=e.Mattertag.MediaType[s],c.text=s,t.appendChild(c)}}document.getElementById("mattertag-edit").addEventListener("click",(f=document.getElementById("tag-edit-title"),p=document.getElementById("tag-edit-media"),h=document.getElementById("tag-edit-desc"),g=document.getElementById("tag-edit-mediatype"),function(){i(),e.Mattertag.editBillboard(t.value,{label:f.value||void 0,description:h.value||void 0,media:""!==g.value?{src:p.value,type:g.value}:void 0}).then((function(){var e=t.options[t.selectedIndex].innerText;l("edited [".concat(e,"], (SID=").concat(t.value,")"))}),(function(e){r(e)}))})),document.getElementById("tag-edit-color").addEventListener("click",function(){const n=document.getElementById("tag-color-r"),r=document.getElementById("tag-color-g"),a=document.getElementById("tag-color-b");return function(){e.Mattertag.editColor(t.value,{r:parseFloat(n.value),g:parseFloat(r.value),b:parseFloat(a.value)})}}()),document.getElementById("tag-edit-stem").addEventListener("click",function(){const n=document.getElementById("stem-height"),r=document.getElementById("stem-visible");return function(){const a=parseFloat(n.value),l=r.checked;e.Mattertag.editStem(t.value,{stemHeight:a,stemVisible:l})}}()),document.getElementById("mattertag-opacity-edit").addEventListener("click",function(){const n=document.getElementById("mattertag-opacity");return function(){e.Mattertag.editOpacity(t.value,parseFloat(n.value))}}()),document.getElementById("injectHTML").addEventListener("click",function(){const n=document.getElementById("mattertag-html-w"),r=document.getElementById("mattertag-html-h"),a=document.getElementById("injectedHTML");return function(){e.Mattertag.injectHTML(t.value,a.value,{globalVariableMap:{on:"on",off:"off",send:"send",tag:"tag"},size:{w:n.value||0,h:r.value||0}}).then((function(e){function t(){let e="";for(let t=0;t<6;++t)e+=Math.floor(16*Math.random()).toString(16);return"#"+e}e.on("click",(function(n){console.log("page received",n);const r=t();e.send("update.button",r,r.toString())}))}))}}()),document.getElementById("navigateToTag").addEventListener("click",(u=document.getElementById("mattertag-navigation-type"),d=document.getElementById("mattertag-navigation-force"),function(){i(),e.Mattertag.navigateToTag(t.value,e.Mattertag.Transition[u.value],d.checked).then((function(e){l("moved to ["+t.options[t.selectedIndex].innerText+"], (SID="+t.value+")")}),(function(e){r(e)}))}));var u,d;var f,p,h,g}(e);const n={},a=document.getElementsByClassName("sweep-selector");var s;[].slice.call(a).forEach((function(t){o(t),e.Sweep.data.subscribe({onAdded(e,t){n[e]=t},onRemoved(e){delete n[e]},onCollectionUpdated(e){if(!t.hasChildNodes())for(const r in e){var n=document.createElement("option");n.value=r,n.text=r,t.appendChild(n)}}})}));var c,u,d,f,p,h,g,m,v,b,y,x,k,j={};e.Mattertag.data.subscribe({onCollectionUpdated(e){j=e}}),e.on(e.Model.Event.MODEL_LOADED,(function(e){l("Model successfully loaded")})).on(e.Mode.Event.CHANGE_START,(function(e,t){l("moved to mode: "+t+" from "+e)})).on(e.Camera.Event.MOVE,(function(e){s=e})).on(e.Mattertag.Event.CLICK,(function(n){var r=j[n],a={},l={};e.Mattertag.getDiscPosition(r,a),e.Conversion.worldToScreen(a,s,{w:t.clientWidth,h:t.clientHeight},l),console.log("clicked",n),console.log("with a world position of",a),console.log("and a screen position of",l)})),[].slice.call(document.querySelectorAll(".navButton")).forEach((function(t){t.addEventListener("click",(function(t){var n=this.getAttribute("data-direction");i(),e.Camera.moveInDirection(e.Camera.Direction[n]).then((function(e){l(e)}),(function(e){r(e)}))}))})),document.getElementById("pan").addEventListener("click",(c=document.getElementById("positionX"),u=document.getElementById("positionZ"),function(t){i(),e.Camera.pan({x:parseFloat(c.value)||0,z:parseFloat(u.value)||0}).then((function(e){l("Camera.pan complete")}),(function(e){r(e)}))})),[document.getElementById("tiltUp"),document.getElementById("tiltDown"),document.getElementById("rotateLeft"),document.getElementById("rotateRight")].forEach((function(t){var n=document.getElementById("rotation");t.addEventListener("click",(function(t){var a=this.getAttribute("data-direction");i(),e.Camera.rotateInDirection(e.Camera.Direction[a],parseFloat(n.value)).then((function(e){l("Rotation complete: ")}),(function(e){r(e)}))}))})),e.Camera.rotateInDirection=function(t,n){return e.Camera.rotate(t===e.Camera.Direction.RIGHT?n:t===e.Camera.Direction.LEFT?-n:0,t===e.Camera.Direction.UP?n:t===e.Camera.Direction.DOWN?-n:0)},document.getElementById("freeRotate").addEventListener("click",(d=document.getElementById("rotationX"),f=document.getElementById("rotationY"),p=document.getElementById("rotationSpeed"),function(t){var n=d.value||0,a=f.value||0;i(),e.Camera.rotate(parseFloat(n),parseFloat(a),{speed:parseFloat(p.value)}).then((function(e){l("Free rotation complete:")}),(function(e){r(e)}))})),document.getElementById("orient").addEventListener("click",function(){var t=document.getElementById("rotationX"),n=document.getElementById("rotationY"),a=document.getElementById("rotationSpeed");return function(o){var s=t.value||0,c=n.value||0;i(),e.Camera.setRotation({x:parseFloat(s),y:parseFloat(c)},{speed:parseFloat(a.value)}).then((function(e){l(" Orient complete: ")}),(function(e){r(e)}))}}()),[].slice.call(document.querySelectorAll(".modeButton")).forEach((function(t){t.addEventListener("click",(function(t){var n=document.getElementById("modeStyles"),a=e.Mode.TransitionType[n.value],o=this.getAttribute("id");i(),e.Mode.moveTo(e.Mode.Mode[o],{transition:a}).then((function(e){l(e)}),(function(e){r(e)}))}))})),document.getElementById("moveToSweep").addEventListener("click",(h=document.getElementById("sweepIds"),g=document.getElementById("flyStyles"),m=document.getElementById("sweepRotationX"),v=document.getElementById("sweepRotationY"),b=document.getElementById("sweepTransitionTime"),function(t){var n=h.value,a=e.Sweep.Transition[g.value],o={x:m.value||0,y:v.value||0},s=b.value;i(),e.Sweep.moveTo(n,{rotation:o,transition:a,transitionTime:s}).then((function(e){l("moved to sweep "+e)}),(function(e){r(e)}))})),document.getElementById("getPose").addEventListener("click",(y=null,x=document.getElementById("pose"),function(){y?(y.cancel(),y=null):y=e.Camera.pose.subscribe({onChanged:function(e){x.innerText=JSON.stringify(e)}})})),document.getElementById("screenshot").addEventListener("click",(k=document.getElementById("screenshot-preview"),function(t){e.Renderer.takeScreenShot(void 0,{mattertags:!1}).then((function(e){k.setAttribute("src",e)}))})),document.getElementById("equirectangle").addEventListener("click",function(){var t=document.getElementById("screenshot-preview");return function(n){e.Renderer.takeEquirectangular().then((function(e){t.setAttribute("src",e)}))}}()),e.Sweep.current.subscribe((function(e){""===e.sid?console.log("Not currently stationed at a sweep position"):console.log(e)})),function(e){e.Mattertag.data.subscribe(function(){var e=[].slice.call(document.getElementsByClassName("mattertag-selector"));e.forEach((function(e){for(;e.lastChild;)e.removeChild(e.lastChild)}));var t={};function n(e){var t=document.createElement("option");return t.value=e.sid,t.text=e.label||"(no label)",t}return{onAdded(r,a){e.forEach((function(e){var l=n(a);t[r]=t[r]||[],t[r].push(l);let i=e.firstChild;for(;i&&l.text.localeCompare(i.text)>0;)i=i.nextSibling;e.insertBefore(l,i)}))},onRemoved(e){(t[e]||[]).forEach((function(e){e.parentElement.removeChild(e)})),delete t[e]},onUpdated(e,n){(t[e]||[]).forEach((function(e){e.text=n.label}))}}}())}(e),document.getElementById("tourStartBtn").addEventListener("click",(function(){e.Tour.start()})),document.getElementById("tourStopBtn").addEventListener("click",(function(){e.Tour.stop()})),document.getElementById("tourPrevBtn").addEventListener("click",(function(){e.Tour.prev()})),document.getElementById("tourNextBtn").addEventListener("click",(function(){e.Tour.next()})),document.getElementById("tourSteppedBtn").addEventListener("click",(function(){var t=document.getElementById("tour-stepped");e.Tour.step(parseInt(t.value,10))}));var E,w,T=null;document.getElementById("getPointer").addEventListener("click",(function(){var t=document.getElementById("pointer");T?(T.cancel(),T=null):T=e.Pointer.intersection.subscribe((function(e){t.innerText=JSON.stringify(e)}))})),e.Camera.zoom.subscribe((E=document.getElementById("current-zoom-level"),function(e){E.innerText=e.level.toFixed(5)})),document.getElementById("zoom-by").addEventListener("click",(w=document.getElementById("zoom-by-val"),function(){e.Camera.zoomBy(w.value).then((function(e){l("Zoomed by "+w.value+" to "+e)}))})),document.getElementById("zoom-to").addEventListener("click",function(){var t=document.getElementById("zoom-to-val");return function(){e.Camera.zoomTo(t.value).then((function(e){l("Zoomed to "+e)}))}}()),document.getElementById("zoom-reset").addEventListener("click",(function(){e.Camera.zoomReset().then((function(){l("reset zoom")}))})),function(e,t){var n=document.getElementById("sweep-enable-selector"),r={},a=document.getElementById("sweep-enable");function l(){r[n.value]=a.checked,a.checked?e.Sweep.enable(n.value):e.Sweep.disable(n.value)}n.addEventListener("change",(function(){var e=t[n.value].enabled;a.checked=e})),a.addEventListener("change",l)}(e,n)}var c=a(893),u=a(745),d=a(294);class f extends d.Component{constructor(e){super(e),this.optionMap=new Map,this.onChanged=e=>this.onValueChanged(e),this.state={availableOptions:this.optionMap,selected:""},this.selectRef=(0,d.createRef)()}componentDidMount(){if(!this.subscription){const e=this;this.subscription=this.props.collection.subscribe({onAdded(t,n){e.props.filter&&!e.props.filter(n)||e.optionMap.set(t,n)},onRemoved(t){e.optionMap.delete(t)},onUpdated(t,n){!e.props.filter||e.props.filter(n)?e.optionMap.set(t,n):e.optionMap.delete(t)},onCollectionUpdated(t){e.setState((n=>{const r=t[n.selected]?n.selected:Object.keys(t)[0];return e.props.onChanged&&(r?e.props.onChanged(r,e.optionMap.get(r)):e.props.onChanged("",void 0)),{availableOptions:new Map(e.optionMap),selected:void 0!==r?r:""}}))}})}}componentWillUnmount(){this.subscription&&this.subscription.cancel()}onValueChanged(e){if(this.setState({selected:e.currentTarget.value}),this.props.onChanged){const t=e.target.value;this.props.onChanged(t,this.optionMap.get(t))}}render(){const e=[...this.state.availableOptions.entries()].sort((([,e],[,t])=>this.props.sort?this.props.sort(e,t):0));return(0,c.jsx)("select",Object.assign({ref:this.selectRef,className:"collection-selector",onChange:this.onChanged,value:this.state.selected},{children:e.length>0?this.renderOptions(e):(0,c.jsx)("option",Object.assign({value:""},{children:"(no values)"}))}))}renderOptions(e){return e.map((([e,t])=>(0,c.jsx)("option",Object.assign({value:e,title:this.props.hoverLabel&&this.props.hoverLabel(t)},{children:this.props.optionLabel?this.props.optionLabel(t):e}),e)))}}const p={overflowY:"auto"};function h(e){return(0,c.jsxs)("div",Object.assign({style:p,className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:e.header})),e.children]}))}function g(e){const[t,n]=(0,d.useState)(),r=(0,d.useCallback)(((t,r)=>{var a,l;if(r){const a=Object.assign({},r);(e.additionalProperties||[]).forEach((function(e){a[e]=r[e]})),n(a),null===(l=e.onChanged)||void 0===l||l.call(e,t,r)}else n(null),null===(a=e.onChanged)||void 0===a||a.call(e,"",void 0)}),[e]);return(0,c.jsxs)(h,Object.assign({header:`${e.label} - Selector`},{children:[(0,c.jsxs)("div",{children:[e.label+":",(0,c.jsx)(f,{collection:e.collection,onChanged:r,sort:e.sort,optionLabel:e.optionLabel,hoverLabel:e.hoverLabel})]}),(0,c.jsx)("div",{children:(0,c.jsx)("textarea",{style:{width:"100%",height:"80%"},readOnly:!0,value:t?function(t){const n=Object.assign({},t);if(e.propertyTransforms){const r=e.propertyTransforms;for(const[e,a]of Object.entries(r))n[e]=a(t[e])}return JSON.stringify(n)}(t):""})})]}))}var m=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function v(e){const t=(0,d.useRef)(null),n=(0,d.useRef)(null),r=(0,d.useCallback)(((t,n)=>m(this,void 0,void 0,(function*(){yield e.sdk.Asset.registerTexture(t,n),e.onRegister(t,n)}))),[e]),a=(0,d.useCallback)((()=>m(this,void 0,void 0,(function*(){t.current&&n.current&&r(t.current.value,n.current.value)}))),[r]);return(0,d.useEffect)((()=>{const e={Chrome:"images/chrome.png",Firefox:"images/firefox.png",Edge:"images/edge.png"};for(const t in e)r(t,e[t])}),[]),(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"asset-id"},{children:"id: "})),(0,c.jsx)("input",{ref:t,className:"small-input",id:"asset-id",type:"string"})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"asset-src"},{children:"src: "})),(0,c.jsx)("input",{ref:n,className:"small-input",id:"asset-src",type:"string"})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({id:"asset-register",onClick:a},{children:"Register"}))})]})}const b=new class{constructor(){this.observers=new Set,this.assets={*[Symbol.iterator](){for(const e in this.assets)yield[e,this.assets[e]]}}}subscribe(e){return this.observers.add(e),{cancel:()=>{this.observers.delete(e)}}}add(e,t){var n,r;this.assets[e]=t;for(const a of this.observers)null===(n=a.onAdded)||void 0===n||n.call(a,e,t,this.assets),null===(r=a.onCollectionUpdated)||void 0===r||r.call(a,this.assets)}};function y(e){const t=(0,d.useCallback)(((t,n)=>{e.setAssets((e=>Object.assign(Object.assign({},e),{[t]:n}))),b.add(t,{id:t,src:n})}),[e]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)(g,{collection:b,label:"Asset",onChanged:e.setSelectedAsset}),(0,c.jsx)(h,Object.assign({header:"Asset - Register"},{children:(0,c.jsx)(v,{sdk:e.sdk,onRegister:t})}))]})}var x=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function k(e){const[t,n]=(0,d.useState)(""),r=(0,d.useRef)(null),a=(0,d.useRef)(null),l=(0,d.useRef)(null),i=(0,d.useCallback)((t=>{!function(){var t,i,o;x(this,void 0,void 0,(function*(){if(!r.current||!a.current||!l.current)return;const s=e.sdk,c=null===(t=r.current)||void 0===t?void 0:t.value,u=null===(i=a.current)||void 0===i?void 0:i.value,d=null===(o=l.current)||void 0===o?void 0:o.value;if(!c||!u||!d)return;let f=null;yield s.Camera.pose.waitUntil((function(e){return f=e,!0}));const p=document.getElementById("showcase"),h={w:p.clientWidth,h:p.clientHeight};try{const t=yield e.sdk.Conversion.worldToScreen({x:parseFloat(c),y:parseFloat(u),z:parseFloat(d)},f,h);t.x=Math.trunc(t.x),t.y=Math.trunc(t.y),n(`success x:${t.x} y:${t.y}`)}catch(e){n("error")}}))}()}),[]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("button",Object.assign({onClick:i},{children:"worldToScreen"}))}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"text",id:"conversion-worldtoscreen-x",className:"small-input",placeholder:"x",ref:r})}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"text",id:"conversion-worldtoscreen-y",className:"small-input",placeholder:"y",ref:a})}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"text",id:"conversion-worldtoscreen-z",className:"small-input",placeholder:"z",ref:l})})]}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("div",Object.assign({id:"settings-update-message"},{children:t}))}))})]})}function j(e){return(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Conversion"})),(0,c.jsx)("table",{children:(0,c.jsx)("tbody",{children:(0,c.jsx)(k,{sdk:e.sdk})})})]}))}var E=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const w={height:50};function T(e){const[t,n]=(0,d.useState)(null),r=(0,d.useCallback)((()=>E(this,void 0,void 0,(function*(){const t=yield e.sdk.Floor.getData();n(t)}))),[]),a=JSON.stringify(t);return(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",Object.assign({colSpan:1},{children:(0,c.jsx)("button",Object.assign({onClick:r},{children:"getData"}))})),(0,c.jsx)("td",Object.assign({colSpan:2},{children:(0,c.jsx)("textarea",{rows:3,style:w,value:a,readOnly:!0})}))]})}var S=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function C(e){const[t,n]=(0,d.useState)(""),[r,a]=(0,d.useState)(!1),l=(0,d.useRef)(null),i=(0,d.useRef)(null),o=(0,d.useCallback)((t=>S(this,void 0,void 0,(function*(){if(!l.current||!i.current)return;let t;try{const n=parseInt(l.current.value,10);let a;if(r)a=yield e.sdk.Floor.moveTo(n);else{const t=i.current.checked;a=yield e.sdk.Floor.moveTo(n,t)}t=`Moved to floor index ${a}`}catch(e){t=`Error ${e}`}n(t)}))),[]),s=(0,d.useCallback)((()=>{a(!0)}),[]),u=r?"Move camera(set)":"Move camera(unset)";return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",Object.assign({colSpan:1},{children:(0,c.jsx)("button",Object.assign({onClick:o},{children:"moveTo"}))})),(0,c.jsx)("td",Object.assign({colSpan:1},{children:(0,c.jsx)("input",{type:"number",id:"floor-moveto-index",className:"small-input",placeholder:"index",ref:l})})),(0,c.jsxs)("td",Object.assign({colSpan:1},{children:[(0,c.jsx)("div",{children:u}),(0,c.jsx)("input",{id:"floor-moveto-movecamera",type:"checkbox",ref:i,defaultChecked:!0,onChange:s})]}))]}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:2},{children:(0,c.jsx)("div",Object.assign({id:"settings-get-message"},{children:t}))}))})]})}var O=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function N(e){const t=(0,d.useCallback)((t=>O(this,void 0,void 0,(function*(){yield e.sdk.Floor.showAll()}))),[]);return(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:1},{children:(0,c.jsx)("button",Object.assign({onClick:t},{children:"showAll"}))}))})}const I={height:5};function R(){return(0,c.jsx)("tr",{style:I})}const P={width:"200px",borderWidth:1,borderStyle:"solid",borderColor:"lightgray"},A={maxWidth:20},L={padding:2,height:"50%",overflow:"scroll"},_={backgroundColor:"rgba(239, 239, 239, 0.3)"};function F(e){const[t,n]=(0,d.useState)([]),[r,a]=(0,d.useState)(!1),l=(0,d.useRef)(null);(0,d.useRef)().current=t;const i=(0,d.useCallback)((function(){const t=function(e,t,r){const a={checked:!1,type:e,payload:t};n((e=>[...e,a]))};return e.collection.subscribe({onAdded:(e,n)=>{t("onAdded",n)},onRemoved:(e,n)=>{t("onRemoved",n)},onUpdated:(e,n)=>{t("onUpdated",n)},onCollectionUpdated:e=>{t("onCollectionUpdated",e)}})}),[e.collection]),o=(0,d.useCallback)((e=>{const{currentTarget:t}=e;t.checked?(n([]),l.current=i()):(l.current.cancel(),l.current=null),a(t.checked)}),[i]),s=(0,d.useCallback)((function(e){const r=parseInt(e.currentTarget.value,10),a=[...t];a[r].checked=e.currentTarget.checked,n(a)}),[t]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:["Collection: ",e.name]}),(0,c.jsxs)("div",{children:["subscribe: ",(0,c.jsx)("input",{type:"checkbox",onChange:o})]}),(0,c.jsx)("div",Object.assign({style:r?Object.assign({},P):Object.assign(Object.assign({},P),_)},{children:(0,c.jsx)("ol",Object.assign({style:L},{children:t.map((function(e,t){return(0,c.jsxs)("li",{children:[(0,c.jsx)("input",{type:"checkbox",value:t,onChange:s,style:A}),e.type,(0,c.jsx)("textarea",{rows:3,style:(n=e.checked,{height:32,display:n?"block":"none"}),defaultValue:JSON.stringify(e.payload)})]},t);var n}))}))}))]})}const M={height:50};function D(e){const[t,n]=(0,d.useState)(""),[r,a]=(0,d.useState)(!1),l=(0,d.useRef)(null),i=(0,d.useCallback)((t=>{const{currentTarget:r}=t;r.checked?l.current=e.observable.subscribe({onChanged(e){if(null===e||"object"!=typeof e||Array.isArray(e))n(JSON.stringify(e));else{const t=Object.assign({},e);for(const n of Object.keys(t)){const r=e[n];r instanceof Set&&(t[n]=[...r.values()])}n(JSON.stringify(t))}}}):(l.current.cancel(),l.current=null,n("")),a(r.checked)}),[e.observable]),o=r?t:"not subbed";return(0,c.jsxs)("div",{children:[(0,c.jsxs)("div",{children:["Observable: ",e.name]}),(0,c.jsxs)("div",{children:["subscribe: ",(0,c.jsx)("input",{type:"checkbox",onChange:i})]}),(0,c.jsx)("div",{children:(0,c.jsx)("textarea",{rows:3,style:M,readOnly:!0,value:o,disabled:!r})})]})}function z(e){const[t,n]=(0,d.useState)([]);(0,d.useEffect)((function(){const r=e.sdk,a=function(e){return function(...r){const a=[];for(const e of r)"object"==typeof e?a.push(JSON.stringify(e)):a.push(e);t.push({checked:!1,type:e,data:a.join(",")}),n([...t])}};for(const t of Object.values(e.enum))r.on(t,a(t))}),[e.sdk,e.enum,t]);const r=(0,d.useCallback)((function(e){const r=parseInt(e.target.value,10),a=[...t];a[r].checked=e.target.checked,n(a)}),[t]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:1},{children:(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Event"}))}))}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("ol",Object.assign({style:{padding:2}},{children:t.map((function(e,t){return(0,c.jsxs)("li",Object.assign({style:{display:"flex",justifyContent:"flex-start"}},{children:[(0,c.jsx)("input",{type:"checkbox",value:t,onChange:r,style:{maxWidth:20}}),e.checked?(0,c.jsx)("textarea",{rows:3,style:{height:30,float:"right"},defaultValue:e.data}):(0,c.jsx)("div",Object.assign({style:{float:"right"}},{children:String(e.type)}))]}),t)}))}))}))})]})}function B(e){return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)(h,Object.assign({header:"Floor"},{children:(0,c.jsx)("table",{children:(0,c.jsxs)("tbody",{children:[(0,c.jsx)(T,{sdk:e.sdk}),(0,c.jsx)(R,{}),(0,c.jsx)(C,{sdk:e.sdk}),(0,c.jsx)(R,{}),(0,c.jsx)(N,{sdk:e.sdk})]})})})),(0,c.jsx)(h,Object.assign({header:"Floor - Current"},{children:(0,c.jsx)(D,{observable:e.sdk.Floor.current,name:"Floor.current"})})),(0,c.jsx)(h,Object.assign({header:"Floor - Collection"},{children:(0,c.jsx)(F,{collection:e.sdk.Floor.data,name:"Floor.data"})})),(0,c.jsx)(h,Object.assign({header:"Floor - Events"},{children:(0,c.jsx)("table",{children:(0,c.jsx)("tbody",{children:(0,c.jsx)(z,{enum:e.sdk.Floor.Event,sdk:e.sdk})})})}))]})}var U=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const H={height:50};function V(e){const[t,n]=(0,d.useState)([]),[r,a]=(0,d.useState)(""),l=(0,d.useCallback)((()=>U(this,void 0,void 0,(function*(){const t=yield e.sdk.Label.getData();n(t),a(t.length>0?t[0].sid:"")}))),[]);let i=(0,c.jsx)("option",Object.assign({value:0,disabled:!0},{children:"(no data)"})),o="";if(t.length>0){i=t.map((e=>(0,c.jsx)("option",Object.assign({value:e.sid},{children:e.sid}),e.sid)));const e=t.findIndex((e=>e.sid===r));if(-1!==e){const n=t[e];o=JSON.stringify(n,null,2)}}const s=(0,d.useCallback)((e=>a(e.target.value)),[]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",Object.assign({colSpan:1},{children:(0,c.jsx)("button",Object.assign({onClick:l},{children:"getData"}))})),(0,c.jsx)("td",Object.assign({colSpan:2},{children:(0,c.jsx)("select",Object.assign({value:r,onChange:s},{children:i}))}))]}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("textarea",{rows:3,style:H,defaultValue:o})}))})]})}function W(e){return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Label"})),(0,c.jsx)("table",{children:(0,c.jsxs)("tbody",{children:[(0,c.jsx)(z,{sdk:e.sdk,enum:e.sdk.Label.Event}),(0,c.jsx)(V,{sdk:e.sdk})]})})]})),(0,c.jsx)(g,{collection:e.sdk.Label.data,label:"Label"})]})}var $,G,K,Q,Y,X,q,J,Z,ee,te,ne,re,ae,le,ie,oe,se,ce,ue,de,fe=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function pe(e){const[t,n]=(0,d.useState)(""),r=(0,d.useCallback)((()=>fe(this,void 0,void 0,(function*(){const t=yield e.createLink();n(t)}))),[e]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)("button",Object.assign({onClick:r},{children:e.label})),(0,c.jsx)("br",{}),(0,c.jsx)("textarea",{style:{height:"3.5em"},value:t,readOnly:!0})]})}function he(e){const t=Object.keys(q.CreationPolicy).map(((e,t)=>(0,c.jsx)("option",Object.assign({value:q.CreationPolicy[e]},{children:e}),t))),n=(0,d.useCallback)((t=>{const n=t.currentTarget.value;n===q.CreationPolicy.MATTERPORT?e.setPolicy(n):e.setPolicy(n,{includeParams:n===q.CreationPolicy.REFERRER?["apiHost","applicationKey"]:["apiHost"]})}),[e]);return(0,c.jsx)("select",Object.assign({onChange:n},{children:t}))}function ge(e){const t=Object.keys(q.OpenPolicy).map(((e,t)=>(0,c.jsx)("option",Object.assign({value:q.OpenPolicy[e]},{children:e}),t))),n=(0,d.useCallback)((t=>{const n=t.currentTarget.value;e.setPolicy(n,{templateHref:window.location.origin+window.location.pathname+"?${bundleVersion}&${apiHost}&${mds}&${applicationKey}"})}),[e]);return(0,c.jsx)("select",Object.assign({onChange:n},{children:t}))}function me(e){const t=(0,d.useCallback)((t=>{const n="new window"===t.currentTarget.value;e.setPolicy(n)}),[e]);return(0,c.jsxs)("select",Object.assign({onChange:t},{children:[(0,c.jsx)("option",Object.assign({value:"new window"},{children:"NEW WINDOW"})),(0,c.jsx)("option",Object.assign({value:"same window"},{children:"SAME WINDOW"}))]}))}function ve(e){return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Link - Create"})),(0,c.jsx)("label",{children:"Policy:"}),(0,c.jsx)(he,{setPolicy:e.sdk.Link.setShareLinkPolicy}),(0,c.jsx)("br",{}),(0,c.jsx)(pe,{label:"createLink",createLink:e.sdk.Link.createLink}),(0,c.jsx)("br",{}),(0,c.jsx)(pe,{label:"createDeepLink",createLink:e.sdk.Link.createDeepLink})]})),(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Link - Set Policy"})),"Opening policies:",(0,c.jsx)("table",{children:(0,c.jsxs)("tbody",{children:[(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:"Model:"}),(0,c.jsx)("td",{children:(0,c.jsx)(ge,{setPolicy:e.sdk.Link.setModelLinkPolicy})})]}),(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:"Navigation:"}),(0,c.jsx)("td",{children:(0,c.jsx)(ge,{setPolicy:e.sdk.Link.setNavigationLinkPolicy})})]}),(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:"Same Origin:"}),(0,c.jsx)("td",{children:(0,c.jsx)(ge,{setPolicy:e.sdk.Link.setSameOriginLinkPolicy})})]}),(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:"External:"}),(0,c.jsx)("td",{children:(0,c.jsx)(me,{setPolicy:e.sdk.Link.setExternalLinkPolicy})})]})]})})]}))]})}function be(e){const t=(0,d.useCallback)((()=>{e.sdk.Mattertag.editIcon(e.selectedMattertag,e.selectedAsset)}),[e.sdk.Mattertag,e.selectedAsset,e.selectedMattertag]),n=(0,d.useCallback)((()=>{e.sdk.Mattertag.resetIcon(e.selectedMattertag)}),[e.sdk.Mattertag,e.selectedMattertag]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:t},{children:"Edit Icon"}))}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:n},{children:"Reset Icon"}))})]})}!function(e){let t,n,r;!function(e){e.PHASE_CHANGE="application.phasechange"}(t=e.Event||(e.Event={})),function(e){e.UNINITIALIZED="appphase.uninitialized",e.WAITING="appphase.waiting",e.LOADING="appphase.loading",e.STARTING="appphase.starting",e.PLAYING="appphase.playing",e.ERROR="appphase.error"}(n=e.Phase||(e.Phase={})),function(e){e.UNKNOWN="application.unknown",e.WEBVR="application.webvr",e.SHOWCASE="application.showcase",e.WORKSHOP="application.workshop"}(r=e.Application||(e.Application={}))}($||($={})),function(e){let t,n,r;!function(e){e.IMAGE="image",e.PDF="pdf",e.VIDEO="video",e.RICH="rich",e.ZIP="zip",e.TEXT="text",e.AUDIO="audio",e.MODEL="model",e.APPLICATION="application"}(t=e.MediaType||(e.MediaType={})),function(e){e.EXTERNAL="external",e.UPLOAD="upload",e.SANDBOX="sandbox"}(n=e.AttachmentCategory||(e.AttachmentCategory={})),function(e){e.COMMENT="comment",e.MATTERTAG="mattertag"}(r=e.ParentType||(e.ParentType={}))}(G||(G={})),function(e){let t,n;!function(e){e.MOVE="camera.move"}(t=e.Event||(e.Event={})),function(e){e.FORWARD="FORWARD",e.LEFT="LEFT",e.RIGHT="RIGHT",e.BACK="BACK",e.UP="UP",e.DOWN="DOWN"}(n=e.Direction||(e.Direction={}))}(K||(K={})),function(e){let t;!function(e){e.CHANGE_START="floors.changestart",e.CHANGE_END="floors.changeend"}(t=e.Event||(e.Event={}))}(Q||(Q={})),function(e){let t;!function(e){e.SUCCESS="astar.status.success",e.NO_PATH="astar.status.no_path",e.TIMEOUT="astar.status.timeout",e.NO_START_VERTEX="astar.status.no_start",e.NO_END_VERTEX="astar.status.no_end"}(t=e.AStarStatus||(e.AStarStatus={}))}(Y||(Y={})),function(e){let t;!function(e){e.POSITION_UPDATED="label.positionupdated"}(t=e.Event||(e.Event={}))}(X||(X={})),function(e){let t,n,r;!function(e){e.WINDOW="link.creationpolicy.window",e.REFERRER="link.creationpolicy.referrer",e.MATTERPORT="link.creationpolicy.matterport"}(t=e.CreationPolicy||(e.CreationPolicy={})),function(e){e.DEFAULT="link.openpolicy.default",e.NEW_WINDOW="link.openpolicy.newwindow",e.SAME_FRAME="link.openpolicy.sameframe",e.CURRENT_WINDOW="link.openpolicy.current"}(n=e.OpenPolicy||(e.OpenPolicy={})),function(e){e.DEFAULT="link.destination.default",e.MATTERPORT="link.destination.matterport"}(r=e.DestinationPolicy||(e.DestinationPolicy={}))}(q||(q={})),function(e){let t,n,r,a,l;!function(e){e.INSTANT="transition.instant",e.FLY="transition.fly",e.FADEOUT="transition.fade"}(t=e.Transition||(e.Transition={})),function(e){e.NAVIGATION="tag.link.nav",e.MODEL="tag.link.model",e.EXT_LINK="tag.link.ext"}(n=e.LinkType||(e.LinkType={})),function(e){e.NONE="tag.chunk.none",e.TEXT="tag.chunk.text",e.LINK="tag.chunk.link"}(r=e.DescriptionChunkType||(e.DescriptionChunkType={})),function(e){e.HOVER="tag.hover",e.CLICK="tag.click",e.LINK_OPEN="tag.linkopen"}(a=e.Event||(e.Event={})),function(e){e.NONE="mattertag.media.none",e.PHOTO="mattertag.media.photo",e.VIDEO="mattertag.media.video",e.RICH="mattertag.media.rich"}(l=e.MediaType||(e.MediaType={}))}(J||(J={})),function(e){let t,n,r;!function(e){e.INSIDE="mode.inside",e.OUTSIDE="mode.outside",e.DOLLHOUSE="mode.dollhouse",e.FLOORPLAN="mode.floorplan",e.TRANSITIONING="mode.transitioning"}(t=e.Mode||(e.Mode={})),function(e){e.CHANGE_START="viewmode.changestart",e.CHANGE_END="viewmode.changeend"}(n=e.Event||(e.Event={})),function(e){e.INSTANT="transition.instant",e.FLY="transition.fly",e.FADEOUT="transition.fade"}(r=e.TransitionType||(e.TransitionType={}))}(Z||(Z={})),function(e){let t;!function(e){e.MODEL_LOADED="model.loaded"}(t=e.Event||(e.Event={}))}(ee||(ee={})),function(e){let t;!function(e){e.NONE="intersectedobject.none",e.MODEL="intersectedobject.model",e.TAG="intersectedobject.tag",e.SWEEP="intersectedobject.sweep",e.UNKNOWN="intersectedobject.unknown"}(t=e.Colliders||(e.Colliders={}))}(te||(te={})),ne||(ne={}),function(e){let t,n;!function(e){e.CAMERA="sensor.sensortype.camera"}(t=e.SensorType||(e.SensorType={})),function(e){e.SPHERE="sensor.sourcetype.sphere",e.BOX="sensor.sourcetype.box",e.CYLINDER="sensor.sourcetype.cylinder"}(n=e.SourceType||(e.SourceType={}))}(re||(re={})),function(e){let t,n,r,a;!function(e){e.ENTER="sweep.enter",e.EXIT="sweep.exit"}(t=e.Event||(e.Event={})),function(e){e.INSTANT="transition.instant",e.FLY="transition.fly",e.FADEOUT="transition.fade"}(n=e.Transition||(e.Transition={})),function(e){e.ALIGNED="aligned",e.UNALIGNED="unaligned"}(r=e.Alignment||(e.Alignment={})),function(e){e.UNPLACED="unplaced",e.AUTO="auto",e.MANUAL="manual"}(a=e.Placement||(e.Placement={}))}(ae||(ae={})),function(e){let t;!function(e){e.UNKNOWN="tag.attachment.unknown",e.APPLICATION="tag.attachment.application",e.AUDIO="tag.attachment.audio",e.IMAGE="tag.attachment.image",e.MODEL="tag.attachment.model",e.PDF="tag.attachment.pdf",e.RICH="tag.attachment.rich",e.TEXT="tag.attachment.text",e.VIDEO="tag.attachment.video",e.ZIP="tag.attachment.zip",e.SANDBOX="tag.attachment.sandbox"}(t=e.AttachmentType||(e.AttachmentType={}))}(le||(le={})),function(e){let t,n;!function(e){e.STARTED="tour.started",e.STOPPED="tour.stopped",e.ENDED="tour.ended",e.STEPPED="tour.stepped"}(t=e.Event||(e.Event={})),function(e){e.INACTIVE="tour.inactive",e.ACTIVE="tour.active",e.STOP_SCHEDULED="tour.stopscheduled"}(n=e.PlayState||(e.PlayState={}))}(ie||(ie={})),function(e){let t,n,r;!function(e){e.OBJ_LOADER="mp.objLoader",e.FBX_LOADER="mp.fbxLoader",e.DAE_LOADER="mp.daeLoader",e.GLTF_LOADER="mp.gltfLoader",e.SCROLLING_TUBE="mp.scrollingTube",e.TRANSFORM_CONTROLS="mp.transformControls",e.LIGHTS_COMPONENT="mp.lights",e.POINT_LIGHT="mp.pointLight",e.DIRECTIONAL_LIGHT="mp.directionalLight",e.AMBIENT_LIGHT="mp.ambientLight",e.CAMERA="mp.camera",e.INPUT="mp.input",e.XR="mp.xr"}(t=e.Component||(e.Component={})),function(e){e.CLICK="INTERACTION.CLICK",e.HOVER="INTERACTION.HOVER",e.DRAG="INTERACTION.DRAG",e.DRAG_BEGIN="INTERACTION.DRAG_BEGIN",e.DRAG_END="INTERACTION.DRAG_END",e.POINTER_MOVE="INTERACTION.POINTER_MOVE",e.POINTER_BUTTON="INTERACTION.POINTER_BUTTON",e.SCROLL="INTERACTION.SCROLL",e.KEY="INTERACTION.KEY",e.LONG_PRESS_START="INTERACTION.LONG_PRESS_START",e.LONG_PRESS_END="INTERACTION.LONG_PRESS_END",e.MULTI_SWIPE="INTERACTION.MULTI_SWIPE",e.MULTI_SWIPE_END="INTERACTION.MULTI_SWIPE_END",e.PINCH="INTERACTION.PINCH",e.PINCH_END="INTERACTION.PINCH_END",e.ROTATE="INTERACTION.ROTATE",e.ROTATE_END="INTERACTION.ROTATE_END"}(n=e.InteractionType||(e.InteractionType={})),function(e){e.INPUT="input",e.OUTPUT="output",e.EVENT="event",e.EMIT="emit"}(r=e.PathType||(e.PathType={}))}(oe||(oe={})),function(e){e[e.BACKSPACE=8]="BACKSPACE",e[e.TAB=9]="TAB",e[e.RETURN=13]="RETURN",e[e.SHIFT=16]="SHIFT",e[e.CONTROL=17]="CONTROL",e[e.ALT=18]="ALT",e[e.ESCAPE=27]="ESCAPE",e[e.SPACE=32]="SPACE",e[e.HASH=35]="HASH",e[e.LEFTARROW=37]="LEFTARROW",e[e.UPARROW=38]="UPARROW",e[e.RIGHTARROW=39]="RIGHTARROW",e[e.DOWNARROW=40]="DOWNARROW",e[e.DELETE=46]="DELETE",e[e.ZERO=48]="ZERO",e[e.ONE=49]="ONE",e[e.TWO=50]="TWO",e[e.THREE=51]="THREE",e[e.FOUR=52]="FOUR",e[e.FIVE=53]="FIVE",e[e.SIX=54]="SIX",e[e.SEVEN=55]="SEVEN",e[e.EIGHT=56]="EIGHT",e[e.NINE=57]="NINE",e[e.AT=64]="AT",e[e.A=65]="A",e[e.B=66]="B",e[e.C=67]="C",e[e.D=68]="D",e[e.E=69]="E",e[e.F=70]="F",e[e.G=71]="G",e[e.H=72]="H",e[e.I=73]="I",e[e.J=74]="J",e[e.K=75]="K",e[e.L=76]="L",e[e.M=77]="M",e[e.N=78]="N",e[e.O=79]="O",e[e.P=80]="P",e[e.Q=81]="Q",e[e.R=82]="R",e[e.S=83]="S",e[e.T=84]="T",e[e.U=85]="U",e[e.V=86]="V",e[e.W=87]="W",e[e.X=88]="X",e[e.Y=89]="Y",e[e.Z=90]="Z",e[e.SEMICOLON=186]="SEMICOLON",e[e.PLUSEQUALS=187]="PLUSEQUALS",e[e.COMMA=188]="COMMA",e[e.DASHUNDERSCORE=189]="DASHUNDERSCORE",e[e.PERIOD=190]="PERIOD",e[e.OPENBRACKET=219]="OPENBRACKET"}(se||(se={})),function(e){e[e.DOWN=0]="DOWN",e[e.PRESSED=1]="PRESSED",e[e.UP=2]="UP"}(ce||(ce={})),function(e){e[e.PRIMARY=0]="PRIMARY",e[e.MIDDLE=1]="MIDDLE",e[e.SECONDARY=2]="SECONDARY",e[e.BACK=3]="BACK",e[e.FORWARD=4]="FORWARD",e[e.COUNT=5]="COUNT"}(ue||(ue={})),function(e){e[e.NONE=0]="NONE",e[e.PRIMARY=1]="PRIMARY",e[e.SECONDARY=4]="SECONDARY",e[e.MIDDLE=2]="MIDDLE",e[e.BACK=8]="BACK",e[e.FORWARD=16]="FORWARD",e[e.ALL=31]="ALL"}(de||(de={}));var ye=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function xe(e){const t=(0,d.useRef)(null),n=(0,d.useRef)(null),r=(0,d.useCallback)((()=>ye(this,void 0,void 0,(function*(){if(t.current&&n.current){const r=t.current.value,a=n.current.value;yield e.sdk.Mattertag.registerIcon(r,a),e.addAsset(r,a)}}))),[e]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)("div",Object.assign({style:{display:"inline-block",width:"15%"}},{children:(0,c.jsx)("label",Object.assign({htmlFor:"mattertag-icon-id"},{children:"id: "}))})),(0,c.jsx)("div",Object.assign({style:{display:"inline-block",width:"85%"}},{children:(0,c.jsx)("input",{ref:t,id:"mattertag-icon-id",type:"string"})}))]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("div",Object.assign({style:{display:"inline-block",width:"15%"}},{children:(0,c.jsx)("label",Object.assign({htmlFor:"mattertag-icon-src"},{children:"src: "}))})),(0,c.jsx)("div",Object.assign({style:{display:"inline-block",width:"85%"}},{children:(0,c.jsx)("input",{ref:n,id:"mattertag-icon-src",type:"string"})}))]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:r},{children:"Register"}))})]})}function ke(e){const[t,n]=(0,d.useState)(""),r=(0,d.useCallback)((function(e){return e.label||"(no label)"}),[]),a=(0,d.useCallback)((function(e,t){return e.label<t.label?-1:e.label>t.label?1:0}),[]),{sdk:l}=e;return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)(h,Object.assign({header:"Mattertag - Collection"},{children:(0,c.jsx)(F,{collection:l.Mattertag.data,name:"Mattertags"})})),(0,c.jsx)(g,{label:"Mattertag",collection:l.Mattertag.data,onChanged:n,optionLabel:r,sort:a}),(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Mattertag"})),(0,c.jsx)("table",{children:(0,c.jsx)("tbody",{children:(0,c.jsx)(z,{sdk:l,enum:e.sdk.Mattertag.Event})})})]})),(0,c.jsx)(h,Object.assign({header:"Mattertag - Edit Icon"},{children:(0,c.jsx)(be,{sdk:l,selectedMattertag:t,selectedAsset:e.selectedAsset})})),(0,c.jsx)(h,Object.assign({header:"Mattertag - Register Icon"},{children:(0,c.jsx)(xe,{sdk:l,selectedMattertag:t,selectedAsset:e.selectedAsset,addAsset:e.addAsset})}))]})}var je=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const Ee={height:50};function we(e){const[t,n]=(0,d.useState)(""),r=(0,d.useCallback)((()=>je(this,void 0,void 0,(function*(){let t;try{t=yield e.sdk.Measurements.getData(),n(JSON.stringify(t))}catch(e){n(`error ${e}`)}}))),[]);return(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",Object.assign({colSpan:1},{children:(0,c.jsx)("button",Object.assign({onClick:r},{children:"getData"}))})),(0,c.jsx)("td",Object.assign({colSpan:2},{children:(0,c.jsx)("textarea",{rows:3,style:Ee,value:t,readOnly:!0})}))]})}function Te({sdk:e}){const[t,n]=(0,d.useState)(!1);(0,d.useEffect)((()=>{const t=e.Measurements.mode.subscribe((e=>n(e.active)));return()=>t.cancel()}),[]);const r=(0,d.useCallback)((()=>{e.Measurements.toggleMode(!t)}),[t,e.Measurements]);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:r},{children:"Toggle"}))}),(0,c.jsxs)("div",{children:["Active: ",(0,c.jsx)("span",{children:String(t)})]})]})}function Se({sdk:e}){return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(g,{collection:e.Measurements.data,label:"Measurements"}),(0,c.jsx)(h,Object.assign({header:"Measurements - Mode"},{children:(0,c.jsx)(D,{name:"mode",observable:e.Measurements.mode})})),(0,c.jsx)(h,Object.assign({header:"Measurements - Toggle"},{children:(0,c.jsx)(Te,{sdk:e})})),(0,c.jsx)(h,Object.assign({header:"Measurements - GetData"},{children:(0,c.jsx)("table",{children:(0,c.jsx)("tbody",{children:(0,c.jsx)(we,{sdk:e})})})}))]})}var Ce=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const Oe={height:50};function Ne(e){const[t,n]=(0,d.useState)(""),r=(0,d.useCallback)((()=>Ce(this,void 0,void 0,(function*(){let t;try{t=yield e.sdk.Model.getData(),n(JSON.stringify(t))}catch(e){n(`error ${e}`)}}))),[]);return(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",Object.assign({colSpan:1},{children:(0,c.jsx)("button",Object.assign({onClick:r},{children:"getData"}))})),(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("textarea",{rows:3,style:Oe,value:t,readOnly:!0})}))]})}var Ie=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const Re={height:50};function Pe(e){const[t,n]=(0,d.useState)(""),r=(0,d.useCallback)((()=>Ie(this,void 0,void 0,(function*(){let t;try{t=yield e.sdk.Model.getDetails(),n(JSON.stringify(t))}catch(e){n(`error ${e}`)}}))),[]);return(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",Object.assign({colSpan:1},{children:(0,c.jsx)("button",Object.assign({onClick:r},{children:"getDetails"}))})),(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("textarea",{rows:3,style:Re,value:t,readOnly:!0})}))]})}function Ae(e){return(0,c.jsx)(d.Fragment,{children:(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Model"})),(0,c.jsx)("table",{children:(0,c.jsxs)("tbody",{children:[(0,c.jsx)(Ne,{sdk:e.sdk}),(0,c.jsx)(Pe,{sdk:e.sdk}),(0,c.jsx)(z,{sdk:e.sdk,enum:e.sdk.Model.Event})]})})]}))})}var Le=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function _e(e){const[t,n]=(0,d.useState)(""),r=(0,d.useRef)(null),a=(0,d.useRef)(null),l=(0,d.useRef)(null),i=(0,d.useCallback)((()=>Le(this,void 0,void 0,(function*(){var t,i,o;if(!r)return;const s=null===(t=r.current)||void 0===t?void 0:t.value,c=null===(i=a.current)||void 0===i?void 0:i.value,u=null===(o=l.current)||void 0===o?void 0:o.value;if(void 0===s||void 0===c||void 0===u)return;const d=e.sdk.Plugin;try{yield d.load({applicationKey:c,id:u},new URL(s,window.location.origin).href)}catch(e){n(`error: ${e}`)}}))),[]),o=(0,d.useCallback)((()=>Le(this,void 0,void 0,(function*(){var t,i;if(!r)return;const o=null===(t=a.current)||void 0===t?void 0:t.value,s=null===(i=l.current)||void 0===i?void 0:i.value;if(void 0===o||void 0===s)return;const c=e.sdk.Plugin;try{yield c.unload({applicationKey:o,id:s})}catch(e){n(`error: ${e}`)}}))),[]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("span",{children:"App Key"})}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"text",placeholder:"application key",defaultValue:"qa314apf28d4um76n45cz91md",ref:a})})]}),(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("span",{children:"Plugin Id"})}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"text",placeholder:"plugin id",ref:l})})]}),(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("span",{children:"Url"})}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"text",id:"scene-source-url",placeholder:"source url",ref:r})})]}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",{children:(0,c.jsx)("button",Object.assign({onClick:i},{children:"Load"}))})}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",{children:(0,c.jsx)("button",Object.assign({onClick:o},{children:"Unload"}))})}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("div",Object.assign({id:"scene-setplugin-message"},{children:t}))}))})]})}function Fe(e){const t=e.sdk.Plugin;return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)(h,Object.assign({header:"Plugin"},{children:(0,c.jsx)("table",{children:(0,c.jsx)("tbody",{children:(0,c.jsx)(_e,{sdk:e.sdk})})})})),(0,c.jsx)(h,Object.assign({header:"Plugin - Collection"},{children:(0,c.jsx)(F,{collection:t.data,name:"Plugin.data"})}))]})}function Me(e){const t=(0,d.useCallback)((()=>{e.sdk.Pointer.editTexture(e.selectedAsset)}),[e.sdk.Pointer,e.selectedAsset]),n=(0,d.useCallback)((()=>{e.sdk.Pointer.resetTexture()}),[e.sdk.Pointer]);return(0,c.jsxs)(d.Fragment,{children:["SelectedAsset: ",e.selectedAsset,(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:t},{children:"Edit Texture"}))}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:n},{children:"Reset Texture"}))})]})}var De=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function ze(e){const t=(0,d.useRef)(null),n=(0,d.useRef)(null),r=(0,d.useCallback)((()=>De(this,void 0,void 0,(function*(){if(t.current&&n.current){const r=t.current.value,a=n.current.value;yield e.sdk.Pointer.registerTexture(r,a),e.addAsset(r,a)}}))),[e]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"pointer-texture-id"},{children:"id: "})),(0,c.jsx)("input",{ref:t,id:"pointer-texture-id",type:"string"})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"pointer-texture-src"},{children:"src: "})),(0,c.jsx)("input",{ref:n,id:"pointer-texture-src",type:"string"})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:r},{children:"Register"}))})]})}function Be(e){const{sdk:t,selectedAsset:n,addAsset:r}=e;return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(h,Object.assign({header:"Pointer - Register Texture"},{children:(0,c.jsx)(ze,{sdk:t,addAsset:r})})),(0,c.jsx)(h,Object.assign({header:"Pointer - Edit Texture"},{children:(0,c.jsx)(Me,{sdk:t,selectedAsset:n})}))]})}var Ue=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function He(e){const[t,n]=(0,d.useState)(""),r=(0,d.useRef)(null),a=(0,d.useRef)(null),l=(0,d.useRef)(null),i=(0,d.useCallback)((t=>{!function(){var t,i,o;Ue(this,void 0,void 0,(function*(){if(!r.current||!a.current||!l.current)return;const s=null===(t=r.current)||void 0===t?void 0:t.value,c=null===(i=a.current)||void 0===i?void 0:i.value,u=null===(o=l.current)||void 0===o?void 0:o.value;if(s&&c&&u)try{const t=yield e.sdk.Renderer.getScreenPosition({x:parseFloat(s),y:parseFloat(c),z:parseFloat(u)});t.x=Math.trunc(t.x),t.y=Math.trunc(t.y),n(`success x:${t.x} y:${t.y}`)}catch(e){n("error")}}))}()}),[]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("button",Object.assign({onClick:i},{children:"getScreenPosition"}))}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"number",id:"renderer-getscreenposition-x",className:"small-input",placeholder:"x",ref:r})}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"number",id:"renderer-getscreenposition-y",className:"small-input",placeholder:"y",ref:a})}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"number",id:"renderer-getscreenposition-z",className:"small-input",placeholder:"z",ref:l})})]}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("div",Object.assign({id:"renderer-getscreenposition-message"},{children:t}))}))})]})}var Ve=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function We(e){const[t,n]=(0,d.useState)(""),r=(0,d.useRef)(null),a=(0,d.useRef)(null),l=(0,d.useCallback)((t=>{!function(){var t,l;Ve(this,void 0,void 0,(function*(){if(!r.current||!a.current)return;const i=null===(t=r.current)||void 0===t?void 0:t.value,o=null===(l=a.current)||void 0===l?void 0:l.value;if(i&&o)try{const t=yield e.sdk.Renderer.getWorldPositionData({x:parseFloat(i),y:parseFloat(o)});n(`success ${JSON.stringify(t)}`)}catch(e){n("error")}}))}()}),[]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("button",Object.assign({onClick:l},{children:"getWorldPositionData"}))}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"number",id:"renderer-getworldpositiondata-x",className:"small-input",placeholder:"x",ref:r})}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"number",id:"renderer-getworldpositiondata-y",className:"small-input",placeholder:"y",ref:a})})]}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("div",Object.assign({id:"renderer-getscreenposition-message"},{children:t}))}))})]})}function $e(e){return(0,c.jsx)(d.Fragment,{children:(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Renderer"})),(0,c.jsx)("table",{children:(0,c.jsxs)("tbody",{children:[(0,c.jsx)(He,{sdk:e.sdk}),(0,c.jsx)(We,{sdk:e.sdk})]})})]}))})}function Ge(e){return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)(h,Object.assign({header:"Room - Current"},{children:(0,c.jsx)(D,{observable:e.sdk.Room.current,name:"Room.current"})})),(0,c.jsx)(h,Object.assign({header:"Room - Collection"},{children:(0,c.jsx)(F,{collection:e.sdk.Room.data,name:"Room.data"})}))]})}function Ke(e){const t=(0,d.useRef)(null),n=(0,d.useCallback)((()=>{var n,r;(null===(n=t.current)||void 0===n?void 0:n.value)&&e.path.set(null===(r=t.current)||void 0===r?void 0:r.value)}),[]);return(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",Object.assign({colSpan:2},{children:(0,c.jsx)("button",Object.assign({onClick:n},{children:e.id}))})),(0,c.jsx)("td",Object.assign({colSpan:2},{children:(0,c.jsx)("input",{type:"text",placeholder:"string",ref:t})}))]})}const Qe=JSON.parse('{"version":"2.0","payload":{"objects":[{"name":"","position":{"x":0,"y":0.6,"z":0},"rotation":{"x":0,"y":0,"z":0},"scale":{"x":1,"y":1,"z":1},"components":[{"type":"mp.gltfLoader","id":"gltf-loader","inputs":{"url":"","materialUrl":"","visible":true,"localScale":{"x":1,"y":1,"z":1},"localRotation":{"x":0,"y":0,"z":0},"localPosition":{"x":0,"y":0,"z":0},"colliderEnabled":true},"events":{"INTERACTION.CLICK":true,"INTERACTION.HOVER":true,"INTERACTION.DRAG":false,"INTERACTION.DRAG_BEGIN":false,"INTERACTION.DRAG_END":false,"INTERACTION.POINTER_MOVE":false,"INTERACTION.POINTER_BUTTON":false,"INTERACTION.SCROLL":false,"INTERACTION.KEY":false,"INTERACTION.LONG_PRESS_START":false,"INTERACTION.LONG_PRESS_END":false,"INTERACTION.MULTI_SWIPE":false,"INTERACTION.MULTI_SWIPE_END":false,"INTERACTION.PINCH":false,"INTERACTION.PINCH_END":false,"INTERACTION.ROTATE":false,"INTERACTION.ROTATE_END":false}},{"type":"mp.objLoader","id":"obj-loader","inputs":{"url":"","materialUrl":"","visible":true,"localScale":{"x":0.03,"y":0.03,"z":0.03},"localRotation":{"x":0,"y":0,"z":0},"localPosition":{"x":0,"y":0,"z":0},"colliderEnabled":true},"events":{"INTERACTION.CLICK":true,"INTERACTION.HOVER":true,"INTERACTION.DRAG":false,"INTERACTION.DRAG_BEGIN":false,"INTERACTION.DRAG_END":false,"INTERACTION.POINTER_MOVE":false,"INTERACTION.POINTER_BUTTON":false,"INTERACTION.SCROLL":false,"INTERACTION.KEY":false,"INTERACTION.LONG_PRESS_START":false,"INTERACTION.LONG_PRESS_END":false,"INTERACTION.MULTI_SWIPE":false,"INTERACTION.MULTI_SWIPE_END":false,"INTERACTION.PINCH":false,"INTERACTION.PINCH_END":false,"INTERACTION.ROTATE":false,"INTERACTION.ROTATE_END":false}},{"type":"mp.daeLoader","id":"dae-loader","inputs":{"url":"","materialUrl":"","visible":true,"localScale":{"x":1,"y":1,"z":1},"localRotation":{"x":0,"y":0,"z":0},"localPosition":{"x":0,"y":0,"z":0},"colliderEnabled":true},"events":{"INTERACTION.CLICK":true,"INTERACTION.HOVER":true,"INTERACTION.DRAG":false,"INTERACTION.DRAG_BEGIN":false,"INTERACTION.DRAG_END":false,"INTERACTION.POINTER_MOVE":false,"INTERACTION.POINTER_BUTTON":false,"INTERACTION.SCROLL":false,"INTERACTION.KEY":false,"INTERACTION.LONG_PRESS_START":false,"INTERACTION.LONG_PRESS_END":false,"INTERACTION.MULTI_SWIPE":false,"INTERACTION.MULTI_SWIPE_END":false,"INTERACTION.PINCH":false,"INTERACTION.PINCH_END":false,"INTERACTION.ROTATE":false,"INTERACTION.ROTATE_END":false}}],"bindings":[],"id":"JxRI"},{"name":"","position":{"x":0,"y":0,"z":0},"rotation":{"x":0,"y":0,"z":0},"scale":{"x":1,"y":1,"z":1},"components":[{"type":"mp.directionalLight","id":"ouvX","inputs":{"enabled":true,"color":{"r":0.7,"g":0.7,"b":0.7},"intensity":2,"position":{"x":1,"y":5,"z":1},"target":{"x":0,"y":0,"z":0},"castShadow":false,"debug":false},"events":{"INTERACTION.CLICK":false,"INTERACTION.HOVER":false,"INTERACTION.DRAG":false,"INTERACTION.DRAG_BEGIN":false,"INTERACTION.DRAG_END":false,"INTERACTION.POINTER_MOVE":false,"INTERACTION.POINTER_BUTTON":false,"INTERACTION.SCROLL":false,"INTERACTION.KEY":false,"INTERACTION.LONG_PRESS_START":false,"INTERACTION.LONG_PRESS_END":false,"INTERACTION.MULTI_SWIPE":false,"INTERACTION.MULTI_SWIPE_END":false,"INTERACTION.PINCH":false,"INTERACTION.PINCH_END":false,"INTERACTION.ROTATE":false,"INTERACTION.ROTATE_END":false}},{"type":"mp.ambientLight","id":"aZ8Q","inputs":{"enabled":true,"color":{"r":1,"g":1,"b":1},"intensity":0.5},"events":{"INTERACTION.CLICK":false,"INTERACTION.HOVER":false,"INTERACTION.DRAG":false,"INTERACTION.DRAG_BEGIN":false,"INTERACTION.DRAG_END":false,"INTERACTION.POINTER_MOVE":false,"INTERACTION.POINTER_BUTTON":false,"INTERACTION.SCROLL":false,"INTERACTION.KEY":false,"INTERACTION.LONG_PRESS_START":false,"INTERACTION.LONG_PRESS_END":false,"INTERACTION.MULTI_SWIPE":false,"INTERACTION.MULTI_SWIPE_END":false,"INTERACTION.PINCH":false,"INTERACTION.PINCH_END":false,"INTERACTION.ROTATE":false,"INTERACTION.ROTATE_END":false}}],"bindings":[],"id":"rLHR"}],"bindings":[],"paths":[["gltfUrl","JxRI/gltf-loader/url"],["objUrl","JxRI/obj-loader/url"],["daeUrl","JxRI/dae-loader/url"],["ambientIntensity","rLHR/ouvX/intensity"]]}}');var Ye=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const Xe=JSON.stringify(Qe);function qe(e){const[t,n]=(0,d.useState)(null),r=(0,d.useRef)(null),a=function(){if(t){if(t.object&&t.object.stop(),t.objects)for(const e of t.objects)e.stop();n(null)}},l=function(t){var r;return Ye(this,void 0,void 0,(function*(){const a=yield e.sdk.Scene.deserialize(t);if(a)if(Array.isArray(a)){const e=a;for(const t of e)t.start();n({object:null,objects:e,paths:[]})}else if("object"==typeof a){const e=JSON.parse(t),l=null===(r=null==e?void 0:e.payload)||void 0===r?void 0:r.paths,i=[];if(l)for(const e of l)i.push(e[0]);const o=a;o.start(),n({object:o,objects:null,paths:i})}}))},i=(0,d.useCallback)((e=>{if(a(),0===e.target.files.length)return;const t=new FileReader;t.onload=e=>Ye(this,void 0,void 0,(function*(){if(e.target){const t=e.target.result;console.log(t),yield l(t)}})),t.readAsText(e.target.files[0],"UTF-8")}),[]),o=(0,d.useCallback)((e=>{a(),r.current&&(r.current.value="")}),[t]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)("tr",{children:(0,c.jsxs)("td",Object.assign({colSpan:3},{children:[(0,c.jsx)("input",{type:"file",id:"scene-deserialize-key",placeholder:"key",accept:".json",onChange:i,ref:r}),(0,c.jsx)("input",{type:"button",onClick:e=>{r.current&&(r.current.value=""),l(Xe)},value:"Model Loader"})]}))}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("button",Object.assign({onClick:o},{children:"Clear"}))}))}),(()=>{if(t&&t.object){const e=[];for(const{desc:n,path:r}of t.object.pathIterator())n.type===oe.PathType.INPUT&&e.push({desc:n,path:r});return e.map((function(e){return(0,c.jsx)(Ke,{id:e.desc.id,path:e.path},e.desc.id)}))}return null})()]})}function Je(e){return(0,c.jsx)(d.Fragment,{children:(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Scene"})),(0,c.jsx)("table",{children:(0,c.jsx)("tbody",{children:(0,c.jsx)(qe,{sdk:e.sdk})})})]}))})}function Ze(e){return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("div",{children:"TBD"})}))}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",{colSpan:3})})]})}function et(e){return(0,c.jsx)(d.Fragment,{children:(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Sensor"})),(0,c.jsx)("table",{children:(0,c.jsx)("tbody",{children:(0,c.jsx)(Ze,{sdk:e.sdk})})})]}))})}var tt=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function nt(e){const[t,n]=(0,d.useState)(""),r=(0,d.useRef)(null),a=(0,d.useCallback)((t=>tt(this,void 0,void 0,(function*(){var t;if(!r.current)return;const a=null===(t=r.current)||void 0===t?void 0:t.value,l=yield e.sdk.Settings.get(a);n(`key:${a} value:${l}`)}))),[]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("button",Object.assign({onClick:a},{children:"get"}))}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"text",id:"settings-get-key",className:"small-input",placeholder:"key",ref:r})})]}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:2},{children:(0,c.jsx)("div",Object.assign({id:"settings-get-message"},{children:t}))}))})]})}var rt=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function at(e){const[t,n]=(0,d.useState)(""),r=(0,d.useRef)(null),a=(0,d.useRef)(null),l=(0,d.useCallback)((()=>rt(this,void 0,void 0,(function*(){var t,l;if(!r||!a)return;const i=null===(t=r.current)||void 0===t?void 0:t.value,o=null===(l=a.current)||void 0===l?void 0:l.value;if(void 0!==i&&void 0!==o)try{yield e.sdk.Settings.update(i,o),n(`success key:${i} value: ${o}`)}catch(e){n(`error key:${i} value: ${o}`)}}))),[]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("button",Object.assign({onClick:l},{children:"update"}))}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"text",id:"settings-update-key",className:"small-input",placeholder:"key",ref:r})}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"text",id:"settings-update-value",className:"small-input",placeholder:"value",ref:a})})]}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("div",Object.assign({id:"settings-update-message"},{children:t}))}))})]})}function lt(e){return(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Settings"})),(0,c.jsx)("table",{children:(0,c.jsxs)("tbody",{children:[(0,c.jsx)(nt,{sdk:e.sdk}),(0,c.jsx)(at,{sdk:e.sdk})]})})]}))}var it=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function ot(e){const[t,n]=(0,d.useState)(""),r=(0,d.useRef)(null),a=(0,d.useCallback)((()=>it(this,void 0,void 0,(function*(){var t;if(!r)return;const a=null===(t=r.current)||void 0===t?void 0:t.value;if(void 0!==a)try{yield e.sdk.Sweep.disable(a),n(`sweepId:${a} disabled`)}catch(e){n(`error disabling sweepId:${a}`)}}))),[]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("button",Object.assign({onClick:a},{children:"disable"}))}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"text",id:"sweep-disable-sweepId",placeholder:"sweep id",ref:r})})]}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("div",Object.assign({id:"sweep-disable-message"},{children:t}))}))})]})}var st=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function ct(e){const[t,n]=(0,d.useState)(""),r=(0,d.useRef)(null),a=(0,d.useCallback)((()=>st(this,void 0,void 0,(function*(){var t;if(!r)return;const a=null===(t=r.current)||void 0===t?void 0:t.value;if(void 0!==a)try{yield e.sdk.Sweep.enable(a),n(`sweepId:${a} enabled`)}catch(e){n(`error enabling sweepId:${a}`)}}))),[]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("button",Object.assign({onClick:a},{children:"enable"}))}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"text",id:"sweep-enable-sweepId",placeholder:"sweep id",ref:r})})]}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("div",Object.assign({id:"sweep-enable-message"},{children:t}))}))})]})}var ut=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const dt=e=>{const[t,n]=(0,d.useState)({}),[r,a]=(0,d.useState)({}),[l,i]=(0,d.useState)([]),[o,s]=(0,d.useState)([]),[u,f]=(0,d.useState)(""),[p,h]=(0,d.useState)(""),g=(0,d.useRef)(!1),m=(0,d.useRef)("");function v(e){const t=r[e];if(!t)throw new Error("Id doesn't correspond to sweep: "+e);s(t.neighbors),h(e),m.current=e}(0,d.useEffect)((()=>{const t=[];return function(){return ut(this,void 0,void 0,(function*(){yield e.sdk.App.state.waitUntil((t=>t.phase===e.sdk.App.Phase.PLAYING));const r=yield e.sdk.Sweep.Conversion.createIdMap(!0);t.push(e.sdk.Sweep.current.subscribe((e=>{var t;e.id&&f(null!==(t=r[e.id])&&void 0!==t?t:e.id)}))),t.push(e.sdk.Sweep.data.subscribe({onCollectionUpdated(t){return ut(this,void 0,void 0,(function*(){const l=function(e,t){var n;const r={},l=Object.values(e).map((e=>{var n;const a=null!==(n=t[e.id])&&void 0!==n?n:e.id;return r[a]=e,a}));a(r);const i=null!==(n=t[m.current])&&void 0!==n?n:m.current;return r&&r[i]&&s(r[i].neighbors),l}(t,r);g.current?u&&v(u):(i(l),g.current=!0,function(t,r){ut(this,void 0,void 0,(function*(){const a={};yield Promise.all(Object.values(t).map((t=>ut(this,void 0,void 0,(function*(){const n=yield e.sdk.Sweep.Conversion.getLabelFromId(t.id);a[t.id]=n,a[r[t.id]]=n}))))).then((()=>{n(a),u&&v(u)}))}))}(t,r))}))}}))}))}().catch((e=>{console.error(e)})),()=>{t.forEach((e=>{e.cancel()}))}}),[]);const b=(0,c.jsx)("option",Object.assign({value:""},{children:"-"}),-1),y=l.map(((e,n)=>(0,c.jsx)("option",Object.assign({value:e},{children:t[e]}),n)));return y.unshift(b),(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)("p",{children:["Select Sweep: ",(0,c.jsx)("select",Object.assign({onChange:function(e){v(e.currentTarget.value)},value:p},{children:y})),(0,c.jsxs)("button",Object.assign({style:{float:"right"},disabled:!u||u===p,onClick:()=>{v(u)}},{children:[" Use Current (",t[u],") "]}))]}),(0,c.jsxs)("div",Object.assign({style:{width:"250px"}},{children:["Neighbors: ",o.map(((e,n)=>t[e])).join(", ")]})),(0,c.jsx)("hr",{}),(0,c.jsxs)("div",{children:["Remove sweep neighbor:",(0,c.jsxs)("select",Object.assign({onChange:function(t){var n;return ut(this,void 0,void 0,(function*(){const r=t.currentTarget.value;if(!r)return void console.warn("cannot select spacer as ID!");const a=yield e.sdk.Sweep.Conversion.createIdMap(!0);yield e.sdk.Sweep.removeNeighbors(p,[null!==(n=a[r])&&void 0!==n?n:r]),console.log("removed sweep",r)}))},value:-1,style:{float:"right",width:"40px"}},{children:[b,o.map(((e,n)=>(0,c.jsx)("option",Object.assign({value:e},{children:t[e]}),n)))]}))]}),(0,c.jsxs)("div",{children:["Add sweep neighbor:",(0,c.jsx)("select",Object.assign({onChange:function(t){var n;return ut(this,void 0,void 0,(function*(){const r=t.currentTarget.value;if(!r)return void console.warn("cannot select spacer as ID!");const a=yield e.sdk.Sweep.Conversion.createIdMap(!0);yield e.sdk.Sweep.addNeighbors(p,[null!==(n=a[r])&&void 0!==n?n:r]),console.log("added sweep",r)}))},value:-1,style:{float:"right",width:"40px"}},{children:y}))]})]})};function ft(e){return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)(h,Object.assign({header:"Sweep - Current"},{children:(0,c.jsx)(D,{observable:e.sdk.Sweep.current,name:"Sweep.current"})})),(0,c.jsx)(h,Object.assign({header:"Sweep - Collection"},{children:(0,c.jsx)(F,{collection:e.sdk.Sweep.data,name:"Sweep.data"})})),(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Sweep"})),(0,c.jsx)("table",{children:(0,c.jsxs)("tbody",{children:[(0,c.jsx)(ot,{sdk:e.sdk}),(0,c.jsx)(ct,{sdk:e.sdk})]})})]})),(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Sweep"})),(0,c.jsx)("table",{children:(0,c.jsx)("tbody",{children:(0,c.jsx)(z,{sdk:e.sdk,enum:e.sdk.Sweep.Event})})})]})),(0,c.jsx)(h,Object.assign({header:"Sweep Neighbor Connections"},{children:(0,c.jsx)(dt,{sdk:e.sdk})}))]})}function pt(e){const[t,n]=(0,d.useState)(!0),r=(0,d.useRef)(),a=["",""],l=(0,d.useRef)(),i=(0,d.useRef)(),o=(0,d.useCallback)((function(e){a[0]=e,u()}),[]),s=(0,d.useCallback)((function(e){a[1]=e,u()}),[]);function u(){if(r.current){const t=r.current.vertex(a[0]),o=r.current.vertex(a[1]);t&&o&&(l.current&&l.current.cancel(),i.current=e.sdk.Graph.createAStarRunner(r.current,t,o),l.current=i.current.subscribe({onChanged(){n(!0)}}))}n(!0)}(0,d.useEffect)((()=>{e.sdk.Sweep.createGraph().then((e=>r.current=e))}));const p=(0,d.useRef)(null),h=(0,d.useCallback)((function(){if(i.current){const e=i.current.exec();p.current&&(e.status!==Y.AStarStatus.SUCCESS?p.current.value="No path found":p.current.value=e.path.map(((e,t)=>t+": "+e.id)).join("\n")),n(!1)}}),[]);return(0,c.jsx)(d.Fragment,{children:(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Graph - Sweep"})),(0,c.jsxs)("div",{children:["Start: ",(0,c.jsx)(f,{collection:e.sdk.Sweep.data,filter:ht,onChanged:o})]}),(0,c.jsxs)("div",{children:["End: ",(0,c.jsx)(f,{collection:e.sdk.Sweep.data,filter:ht,onChanged:s})]}),(0,c.jsxs)("div",{children:["Path Dirty: ",t.toString()]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:h},{children:"CALCULATE PATH"}))}),(0,c.jsx)("div",{children:(0,c.jsx)("textarea",{style:{width:"300px",height:"72px",whiteSpace:"pre"},ref:p})})]}))})}function ht(e){return e.enabled}function gt(e){const t=(0,d.useRef)(null),n=(0,d.useRef)(null),r=(0,d.useRef)(null),a=(0,d.useRef)(null),l=(0,d.useRef)(null),i=(0,d.useRef)(null),o=(0,d.useRef)(null),s=(0,d.useRef)(null),u=(0,d.useRef)(null),f=(0,d.useRef)(null),p=(0,d.useRef)(null),h=(0,d.useCallback)((()=>{var c;t.current&&n.current&&r.current&&a.current&&l.current&&i.current&&o.current&&s.current&&u.current&&f.current&&e.sdk.Tag.add({id:""===u.current.value?void 0:u.current.value,label:t.current.value,description:n.current.value,anchorPosition:{x:parseFloat(r.current.value),y:parseFloat(a.current.value),z:parseFloat(l.current.value)},stemVector:{x:parseFloat(i.current.value),y:parseFloat(o.current.value),z:parseFloat(s.current.value)},opacity:parseFloat(f.current.value),iconId:(null===(c=p.current)||void 0===c?void 0:c.checked)&&e.selectedAsset?e.selectedAsset:void 0})}),[e.sdk.Tag,e.selectedAsset]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-add-title"},{children:"Title:"})),(0,c.jsx)("input",{ref:t,type:"text",id:"tag2-add-title"})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-add-desc"},{children:"Desc:"})),(0,c.jsx)("textarea",{ref:n,id:"tag2-add-desc"})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("div",{children:"position:"}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-add-pos-x"},{children:"x: "})),(0,c.jsx)("input",{ref:r,className:"small-input",id:"tag2-add-pos-x",type:"number",step:"0.001",defaultValue:"0"}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-add-pos-y"},{children:"y: "})),(0,c.jsx)("input",{ref:a,className:"small-input",id:"tag2-add-pos-y",type:"number",step:"0.001",defaultValue:"0"}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-add-pos-z"},{children:"z: "})),(0,c.jsx)("input",{ref:l,className:"small-input",id:"tag2-add-pos-z",type:"number",step:"0.001",defaultValue:"0"})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("div",{children:"normal:"}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-add-norm-x"},{children:"x: "})),(0,c.jsx)("input",{ref:i,className:"small-input",id:"tag2-add-norm-x",type:"number",step:"0.001",defaultValue:"0"}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-add-norm-y"},{children:"y: "})),(0,c.jsx)("input",{ref:o,className:"small-input",id:"tag2-add-norm-y",type:"number",step:"0.001",defaultValue:"1"}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-add-norm-z"},{children:"z: "})),(0,c.jsx)("input",{ref:s,className:"small-input",id:"tag2-add-norm-z",type:"number",step:"0.001",defaultValue:"0"})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-add-id"},{children:"id: "})),(0,c.jsx)("input",{ref:u,className:"small-input",id:"tag2-add-id",type:"string"}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-add-opacity"},{children:"opacity: "})),(0,c.jsx)("input",{ref:f,className:"small-input",id:"tag2-add-opacity",type:"number",step:"0.01",defaultValue:"1"})]}),(0,c.jsxs)("div",{children:["icon: ",(0,c.jsx)("input",{ref:p,type:"checkbox",defaultChecked:!1}),(0,c.jsx)("input",{type:"text",readOnly:!0,value:e.selectedAsset}),(0,c.jsx)("button",Object.assign({id:"tag2-add",onClick:h},{children:"Add"}))]})]})}function mt(e){const t=(0,d.useRef)(null),n=(0,d.useRef)(null),r=(0,d.useRef)(null),a=(0,d.useRef)(null),[l,i]=(0,d.useState)(new Map),o=(0,d.useCallback)((()=>{t.current&&n.current&&r.current&&a.current&&e.sdk.Tag.allowAction(e.selectedTag,{docking:t.current.checked,opening:n.current.checked,navigating:r.current.checked,sharing:a.current.checked})}),[e.sdk.Tag,e.selectedTag]),s=(0,d.useCallback)((s=>{const c=l.get(e.selectedTag)||{docking:!0,opening:!0,navigating:!0,sharing:!0};s.target===t.current&&(c.docking=!c.docking),s.target===r.current&&(c.navigating=!c.navigating),s.target===n.current&&(c.opening=!c.opening),s.target===a.current&&(c.sharing=!c.sharing),l.set(e.selectedTag,c),i(new Map(l)),o()}),[o,l,e.selectedTag]),u=l.get(e.selectedTag)||{docking:!0,opening:!0,navigating:!0,sharing:!0};return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)("div",{children:"(checked == allowed)"}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-allow-open"},{children:"Billboard:"})),(0,c.jsx)("input",{ref:n,type:"checkbox",id:"tag2-allow-open",onChange:s,checked:u.opening})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-allow-nav"},{children:"Navigation:"})),(0,c.jsx)("input",{ref:r,type:"checkbox",id:"tag2-allow-nav",onChange:s,checked:u.navigating})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-allow-dock"},{children:"Dock:"})),(0,c.jsx)("input",{ref:t,type:"checkbox",id:"tag2-allow-dock",onChange:s,checked:u.docking})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-allow-share"},{children:"Share:"})),(0,c.jsx)("input",{ref:a,type:"checkbox",id:"tag2-allow-share",onChange:s,checked:u.sharing})]})]})}const vt={display:"inline-block",width:"80px"};function bt({sdk:e,selectedTag:t,selectedAttachment:n}){const r=(0,d.useCallback)((()=>{e.Tag.attach(t,n)}),[e.Tag,n,t]),a=(0,d.useCallback)((()=>{e.Tag.detach(t,n)}),[e.Tag,n,t]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({style:vt},{children:"Tag:"})),(0,c.jsx)("input",{type:"text",readOnly:!0,placeholder:"(none)",value:t})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({style:vt},{children:"Attachment:"})),(0,c.jsx)("input",{type:"text",readOnly:!0,placeholder:"(none)",value:n})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:r},{children:"Attach"}))}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:a},{children:"Detach"}))})]})}function yt(e){const t=(0,d.useRef)(null),n=(0,d.useRef)(null),r=(0,d.useCallback)((()=>{t.current&&n.current&&e.sdk.Tag.editBillboard(e.selectedTag,{label:t.current.value||void 0,description:n.current.value||void 0})}),[e.sdk.Tag,e.selectedTag]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-edit-title"},{children:"Title:"})),(0,c.jsx)("input",{ref:t,type:"text",id:"tag2-edit-title"})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-edit-desc"},{children:"Desc:"})),(0,c.jsx)("textarea",{ref:n,id:"tag2-edit-desc"})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({id:"tag2-edit",onClick:r},{children:"Edit"}))})]})}function xt(e){const t=(0,d.useRef)(null),n=(0,d.useRef)(null),r=(0,d.useRef)(null),a=(0,d.useCallback)((()=>{t.current&&n.current&&r.current&&e.sdk.Tag.editColor(e.selectedTag,{r:parseFloat(t.current.value),g:parseFloat(n.current.value),b:parseFloat(r.current.value)})}),[e.sdk.Tag,e.selectedTag]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-color-r"},{children:"R: "})),(0,c.jsx)("input",{ref:t,className:"small-input",id:"tag2-color-r",type:"number",step:.01,defaultValue:1,min:0,max:.75})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-color-g"},{children:"G: "})),(0,c.jsx)("input",{ref:n,className:"small-input",id:"tag2-color-g",type:"number",step:.01,defaultValue:0,min:0,max:1})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-color-b"},{children:"B: "})),(0,c.jsx)("input",{ref:r,className:"small-input",id:"tag2-color-b",type:"number",step:.01,defaultValue:1,min:0,max:.75})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({id:"tag2-edit-color",onClick:a},{children:"Edit Color"}))})]})}function kt(e){const[t,n]=(0,d.useState)(!0),[r,a]=(0,d.useState)(!0),l=(0,d.useRef)(null),i=(0,d.useRef)(null),o=(0,d.useCallback)((function(){n(!t)}),[t]),s=(0,d.useCallback)((function(){a(!r)}),[r]),u=(0,d.useCallback)((()=>{l.current&&i.current&&e.sdk.Tag.editStem(e.selectedTag,{stemVisible:r?i.current.checked:void 0,stemHeight:t?parseFloat(l.current.value):void 0})}),[e.sdk.Tag,e.selectedTag,t,r]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)("input",{type:"checkbox",checked:t,onChange:o}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-stem-height"},{children:"stem height: "})),(0,c.jsx)("input",{ref:l,className:"small-input",id:"tag2-height-stem",type:"number",step:.1,defaultValue:1,min:0,disabled:!t})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("input",{type:"checkbox",checked:r,onChange:s}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-stem-visible"},{children:"stem visible:"})),(0,c.jsx)("input",{ref:i,type:"checkbox",id:"tag2-stem-visible",disabled:!r})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({id:"tag2-edit-stem",onClick:u},{children:"Edit Stem"}))})]})}function jt(e){const t=(0,d.useRef)(null),[n,r]=(0,d.useState)(!0),a=(0,d.useCallback)((()=>{n?e.sdk.Tag.editIcon(e.selectedTag,e.selectedAsset):null!==t.current&&e.sdk.Tag.editIcon(e.selectedTag,t.current.value)}),[e.sdk.Tag,e.selectedAsset,e.selectedTag,n]),l=(0,d.useCallback)((()=>{e.sdk.Tag.resetIcon(e.selectedTag)}),[e.sdk.Tag,e.selectedTag]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:["Use selected Asset?",(0,c.jsx)("input",{type:"checkbox",onChange:e=>{r(e.target.checked)},defaultChecked:n})]}),n?null:(0,c.jsx)("div",{children:(0,c.jsxs)("div",{children:[(0,c.jsx)("div",Object.assign({style:{display:"inline-block",width:"15%"}},{children:(0,c.jsx)("label",Object.assign({htmlFor:"mattertag-icon-id"},{children:"id: "}))})),(0,c.jsx)("div",Object.assign({style:{display:"inline-block",width:"85%"}},{children:(0,c.jsx)("input",{ref:t,id:"mattertag-icon-id",type:"string",defaultValue:e.selectedAsset})}))]})}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({id:"tag2-edit-icon",onClick:a},{children:"Edit Icon"}))}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({id:"tag2-reset-icon",onClick:l},{children:"Reset Icon"}))})]})}function Et(e){const t=(0,d.useRef)(null),n=(0,d.useCallback)((()=>{t.current&&e.sdk.Tag.editOpacity(e.selectedTag,parseFloat(t.current.value))}),[e.sdk.Tag,e.selectedTag]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-opacity"},{children:"opacity: "})),(0,c.jsx)("input",{ref:t,className:"small-input",id:"tag2-opacity",type:"number",step:.01,defaultValue:.5,min:0,max:1})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({id:"tag2-edit-opacity",onClick:n},{children:"Edit Opacity"}))})]})}function wt(e){const[t,n]=(0,d.useState)(!0),[r,a]=(0,d.useState)(!0),l=(0,d.useRef)(null),i=(0,d.useRef)(null),o=(0,d.useRef)(null),s=(0,d.useRef)(null),u=(0,d.useRef)(null),f=(0,d.useRef)(null),p=(0,d.useCallback)((function(){n(!t)}),[t]),h=(0,d.useCallback)((function(){a(!r)}),[r]),g=(0,d.useCallback)((()=>{l.current&&i.current&&o.current&&s.current&&u.current&&f.current&&e.sdk.Tag.editPosition(e.selectedTag,{anchorPosition:t?{x:parseFloat(l.current.value),y:parseFloat(i.current.value),z:parseFloat(o.current.value)}:void 0,stemVector:r?{x:parseFloat(s.current.value),y:parseFloat(u.current.value),z:parseFloat(f.current.value)}:void 0})}),[e.sdk.Tag,e.selectedTag,r,t]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)("div",{children:"position:"}),(0,c.jsxs)("div",{children:[(0,c.jsx)("input",{type:"checkbox",checked:t,onChange:p}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-move-pos-x"},{children:"x: "})),(0,c.jsx)("input",{ref:l,className:"small-input",id:"tag2-move-pos-x",type:"number",step:"0.001",defaultValue:"0",disabled:!t}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-move-pos-y"},{children:"y: "})),(0,c.jsx)("input",{ref:i,className:"small-input",id:"tag2-move-pos-y",type:"number",step:"0.001",defaultValue:"0",disabled:!t}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-move-pos-z"},{children:"z: "})),(0,c.jsx)("input",{ref:o,className:"small-input",id:"tag2-move-pos-z",type:"number",step:"0.001",defaultValue:"0",disabled:!t})]}),(0,c.jsx)("div",{children:"normal:"}),(0,c.jsxs)("div",{children:[(0,c.jsx)("input",{type:"checkbox",checked:r,onChange:h}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-move-norm-x"},{children:"x: "})),(0,c.jsx)("input",{ref:s,className:"small-input",id:"tag2-move-norm-x",type:"number",step:"0.001",defaultValue:"0",disabled:!r}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-move-norm-y"},{children:"y: "})),(0,c.jsx)("input",{ref:u,className:"small-input",id:"tag2-move-norm-y",type:"number",step:"0.001",defaultValue:"1",disabled:!r}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-move-norm-z"},{children:"z: "})),(0,c.jsx)("input",{ref:f,className:"small-input",id:"tag2-move-norm-z",type:"number",step:"0.001",defaultValue:"0",disabled:!r})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({id:"tag2-move",onClick:g},{children:"Move"}))})]})}function Tt({sdk:e,selectedTag:t}){const n=(0,d.useRef)(null),r=(0,d.useRef)(null),a=(0,d.useCallback)((function(){var r;const a=(null===(r=n.current)||void 0===r?void 0:r.checked)||!1;e.Tag.open(t,{force:a})}),[e.Tag,t]),l=(0,d.useCallback)((function(){var n;const a=(null===(n=r.current)||void 0===n?void 0:n.checked)||!1;e.Tag.dock(t,{force:a})}),[e.Tag,t]),i=(0,d.useCallback)((function(){e.Tag.close(t)}),[e.Tag,t]);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("div",{children:(0,c.jsx)("input",{type:"text",readOnly:!0,placeholder:"(none)",value:t})}),(0,c.jsxs)("div",{children:[(0,c.jsx)("button",Object.assign({className:"small-input",onClick:a},{children:"Open"})),(0,c.jsx)("label",Object.assign({style:{marginLeft:"5px"}},{children:"force:"})),(0,c.jsx)("input",{ref:n,id:"tag-force-open",type:"checkbox"})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("button",Object.assign({className:"small-input",onClick:l},{children:"Dock"})),(0,c.jsx)("label",Object.assign({style:{marginLeft:"5px"}},{children:"force:"})),(0,c.jsx)("input",{ref:r,id:"tag-force-dock",type:"checkbox"})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({className:"small-input",onClick:i},{children:"Close"}))})]})}function St(e){const t=(0,d.useRef)(null),n=(0,d.useCallback)((()=>{t.current&&e.sdk.Tag.registerAttachment(t.current.value)}),[e.sdk.Tag]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-register-attachment-src"},{children:"Src:"})),(0,c.jsx)("input",{ref:t,type:"text",id:"tag2-register-attachment-src"})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:n},{children:"Register"}))})]})}var Ct=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function Ot(e){const t=(0,d.useRef)(null),n=(0,d.useRef)(null),r=(0,d.useRef)(null),a=(0,d.useRef)(null),l=(0,d.useCallback)((()=>Ct(this,void 0,void 0,(function*(){if(t.current&&n.current&&r.current&&a.current){const[,l]=yield e.sdk.Tag.registerSandbox(t.current.value,{name:n.current.value,size:{h:parseInt(a.current.value,10),w:parseInt(r.current.value,10)}});l.on("click",(function(e){const t=function(){let e="";for(let t=0;t<6;++t)e+=Math.floor(16*Math.random()).toString(16);return"#"+e}();l.send("update.button",t,t.toString())}))}}))),[e.sdk.Tag]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)("div",{children:(0,c.jsx)("input",{ref:n,type:"text",placeholder:"name"})}),(0,c.jsx)("div",{children:(0,c.jsx)("textarea",{style:{height:"7em"},ref:t,defaultValue:Nt})}),(0,c.jsxs)("div",{children:["width:",(0,c.jsx)("input",{className:"small-input",ref:r,type:"number",defaultValue:350}),"height:",(0,c.jsx)("input",{className:"small-input",ref:a,type:"number",defaultValue:150})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:l},{children:"Register"}))})]})}const Nt="<style>\nbody {\n  background-color: #cccccc;\n}\n#btn1 {\n  width: 100px;\n  height: 20px;\n  background-color: rgb(255, 255, 255);\n  border-radius: 10px;\n  border: 1px solid black;\n  text-align: center;\n}\n</style>\n<br>\n<br>\n<div id='btn1'>CLICK ME!</div>\n<div id='tag'></div>\n<div id='docked'></div>\n<script>\nconst btn1 = document.getElementById('btn1');\nbtn1.addEventListener('click', function () {\n  window.send('click', {buttonId: 1234321});\n});\nwindow.on('update.button', function (color, message) {\n  btn1.innerText = message;\n  btn1.style.backgroundColor = color;\n});\nconst tagOutput = document.getElementById('tag');\ntagOutput.innerHTML = 'Current tag: ' + window.tag;\nconst dockedOutput = document.getElementById('docked');\ndockedOutput.innerHTML = 'Docked: ' + window.docked;\n<\/script>";function It(e){const t=(0,d.useCallback)((()=>{e.sdk.Tag.remove(e.selectedTag)}),[e.sdk.Tag,e.selectedTag]);return(0,c.jsx)(d.Fragment,{children:(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({id:"tag2-remove",onClick:t},{children:"Remove"}))})})}function Rt({toggleSetting:e}){const t=(0,d.useCallback)((()=>{e()}),[e]),n=(0,d.useCallback)((()=>{e(!0)}),[e]),r=(0,d.useCallback)((()=>{e(!1)}),[e]);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({className:"small-input",onClick:t},{children:"Toggle"}))}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({className:"small-input",onClick:n},{children:"Show"}))}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({className:"small-input",onClick:r},{children:"Hide"}))})]})}function Pt(e,t){return e.label<t.label?-1:e.label>t.label?1:0}var At=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function Lt(e){const t=(0,d.useRef)(null),[n,r]=(0,d.useState)(""),a=(0,d.useCallback)((()=>At(this,void 0,void 0,(function*(){if(t.current){const n=yield e.sdk.Tag.importTags(t.current.value);r(`New tag ids: ${n}`)}}))),[e.sdk.Tag]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"space-id"},{children:"spaceId: "})),(0,c.jsx)("input",{ref:t,className:"small-input",id:"space-id",type:"string"})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({id:"copy-tags",onClick:a},{children:"Import"}))}),(0,c.jsx)("textarea",{style:{width:"100%",height:"80%"},readOnly:!0,value:n})]})}var _t=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function Ft(e){const[t,n]=(0,d.useState)(""),r=(0,d.useCallback)((()=>_t(this,void 0,void 0,(function*(){const t=yield e.sdk.Tag.saveToLayer();n(`[${t.join(",")}]`)}))),[e.sdk.Tag]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({id:"saveToLayer",onClick:r},{children:"Save"}))}),(0,c.jsx)("textarea",{style:{width:"100%",height:"80%"},readOnly:!0,value:t})]})}function Mt(e){const[t,n]=(0,d.useState)(""),[r,a]=(0,d.useState)(""),l=(0,d.useCallback)((function(e){return e.label||"(no label)"}),[]),i=(0,d.useCallback)((function(e){return e.src}),[]),o=(0,d.useCallback)((function(e){return e.src.slice(0,30)}),[]),{sdk:s}=e;return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)(h,Object.assign({header:"Tag - SaveToLayer"},{children:(0,c.jsx)(Ft,{sdk:s})})),(0,c.jsx)(h,Object.assign({header:"Tag - Collection"},{children:(0,c.jsx)(F,{collection:s.Tag.data,name:"Tags"})})),(0,c.jsx)(h,Object.assign({header:"Tag.attachments - Collection"},{children:(0,c.jsx)(F,{collection:s.Tag.attachments,name:"Attachments"})})),(0,c.jsx)(g,{label:"Tag",collection:s.Tag.data,onChanged:n,optionLabel:l,sort:Pt,additionalProperties:["stemHeight","discPosition"]}),(0,c.jsx)(g,{label:"Attachment",collection:s.Tag.attachments,onChanged:a,optionLabel:o,hoverLabel:i}),(0,c.jsx)(h,Object.assign({header:"Tag - Add"},{children:(0,c.jsx)(gt,{sdk:s,selectedAsset:e.selectedAsset})})),(0,c.jsx)(h,Object.assign({header:"Tag - Remove"},{children:(0,c.jsx)(It,{sdk:s,selectedTag:t})})),(0,c.jsx)(h,Object.assign({header:"Tag - Open"},{children:(0,c.jsx)(Tt,{sdk:s,selectedTag:t})})),(0,c.jsx)(h,Object.assign({header:'Tag - "Open Tags"'},{children:(0,c.jsx)(D,{observable:s.Tag.openTags,name:"Open Tags"})})),(0,c.jsx)(h,Object.assign({header:"Tag - Edit"},{children:(0,c.jsx)(yt,{sdk:s,selectedTag:t})})),(0,c.jsx)(h,Object.assign({header:"Tag - Color"},{children:(0,c.jsx)(xt,{sdk:s,selectedTag:t})})),(0,c.jsx)(h,Object.assign({header:"Tag - Edit Icon"},{children:(0,c.jsx)(jt,{sdk:s,selectedTag:t,selectedAsset:e.selectedAsset})})),(0,c.jsx)(h,Object.assign({header:"Tag - Opacity"},{children:(0,c.jsx)(Et,{sdk:s,selectedTag:t})})),(0,c.jsx)(h,Object.assign({header:"Tag - Stem"},{children:(0,c.jsx)(kt,{sdk:s,selectedTag:t})})),(0,c.jsx)(h,Object.assign({header:"Tag - Move"},{children:(0,c.jsx)(wt,{sdk:s,selectedTag:t})})),(0,c.jsx)(h,Object.assign({header:"Tag - Allow Actions"},{children:(0,c.jsx)(mt,{sdk:s,selectedTag:t})})),(0,c.jsx)(h,Object.assign({header:"Tag - Attach"},{children:(0,c.jsx)(bt,{sdk:s,selectedTag:t,selectedAttachment:r})})),(0,c.jsx)(h,Object.assign({header:"Tag - Register Attachment"},{children:(0,c.jsx)(St,{sdk:s})})),(0,c.jsx)(h,Object.assign({header:"Tag - Register Sandbox"},{children:(0,c.jsx)(Ot,{sdk:s})})),(0,c.jsx)(h,Object.assign({header:"Tag - Docking Controls"},{children:(0,c.jsx)(Rt,{toggleSetting:s.Tag.toggleDocking})})),(0,c.jsx)(h,Object.assign({header:"Tag - Navigation Controls"},{children:(0,c.jsx)(Rt,{toggleSetting:s.Tag.toggleNavControls})})),(0,c.jsx)(h,Object.assign({header:"Tag - Sharing Controls"},{children:(0,c.jsx)(Rt,{toggleSetting:s.Tag.toggleSharing})})),(0,c.jsx)(h,Object.assign({header:"Tag - Import Tags"},{children:(0,c.jsx)(Lt,{sdk:s})}))]})}var Dt=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const zt={height:50};function Bt(e){const[t,n]=(0,d.useState)([]),r=(0,d.useCallback)((()=>Dt(this,void 0,void 0,(function*(){const t=yield e.sdk.Tour.getData();n(t)}))),[]);let a="";return t.length>0&&(a=JSON.stringify(t,null,2)),(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("button",Object.assign({onClick:r},{children:"getData"}))}),(0,c.jsx)("td",{children:(0,c.jsx)("textarea",{rows:3,style:zt,defaultValue:a})})]})}const Ut={overflowY:"auto"};function Ht(e){return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",Object.assign({style:Ut,className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Tour"})),(0,c.jsx)("table",{children:(0,c.jsxs)("tbody",{children:[(0,c.jsx)(Bt,{sdk:e.sdk}),(0,c.jsx)(z,{sdk:e.sdk,enum:e.sdk.Tour.Event})]})})]})),(0,c.jsxs)(h,Object.assign({header:"Tour - State"},{children:[(0,c.jsx)(D,{name:"current step",observable:e.sdk.Tour.currentStep}),(0,c.jsx)(D,{name:"play state",observable:e.sdk.Tour.state}),(0,c.jsx)(D,{name:"transition",observable:e.sdk.Tour.transition})]}))]})}var Vt=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function Wt({sdk:e}){const t=(0,d.useRef)(null),[n,r]=(0,d.useState)(!0),[a,l]=(0,d.useState)(""),i=(0,d.useCallback)((e=>{r(!e.currentTarget.value)}),[]),o=(0,d.useCallback)((()=>Vt(this,void 0,void 0,(function*(){if(t.current){const n=yield e.View.createLayer(t.current.value);l("created: "+n.id)}}))),[e.View]);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("div",{children:(0,c.jsx)("input",{ref:t,type:"text",onInput:i})}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:o,disabled:n},{children:"Create"}))}),(0,c.jsx)("div",{children:(0,c.jsx)("textarea",{style:{height:"6em"},readOnly:!0,value:a})})]})}function $t({selectedView:e}){var t;const n=(0,d.useRef)(null),r=(0,d.useCallback)((()=>{var t,r;e&&e.setActive(null!==(r=null===(t=n.current)||void 0===t?void 0:t.checked)&&void 0!==r&&r)}),[e]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:["selected: ",(0,c.jsx)("input",{type:"text",value:null!==(t=null==e?void 0:e.id)&&void 0!==t?t:"None",disabled:!0})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"view-start-return"},{children:"Return to Start?"})),(0,c.jsx)("input",{ref:n,id:"view-start-return",type:"checkbox"})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:r},{children:"Activate"}))})]})}function Gt({selectedLayer:e}){var t;const n=(0,d.useCallback)((t=>{e&&e.toggle(t)}),[e]);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)("div",{children:["selected: ",(0,c.jsx)("input",{type:"text",value:null!==(t=null==e?void 0:e.id)&&void 0!==t?t:"None",disabled:!0})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:()=>n(!0)},{children:"Toggle On"}))}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:()=>n(!1)},{children:"Toggle Off"}))})]})}var Kt=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const Qt={display:"inline-block",width:"50px"};function Yt({selectedView:e,selectedLayer:t}){var n,r;const[a,l]=(0,d.useState)(""),i=(0,d.useCallback)((()=>Kt(this,void 0,void 0,(function*(){if(l(""),e&&t)try{yield e.addLayer(t),l("OK")}catch(e){l("[addLayer] Error:"+e)}else l("not ready")}))),[t,e]),o=(0,d.useCallback)((()=>Kt(this,void 0,void 0,(function*(){if(l(""),e&&t)try{yield e.removeLayer(t),l("OK")}catch(e){l("[removeLayer] Error:"+e)}else l("not ready")}))),[t,e]),s=(0,d.useCallback)((()=>Kt(this,void 0,void 0,(function*(){l(e&&t?e.hasLayer(t).toString():"not ready")}))),[t,e]);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)("span",Object.assign({style:Qt},{children:"View:"})),(0,c.jsx)("input",{type:"text",value:null!==(n=null==e?void 0:e.id)&&void 0!==n?n:"None",disabled:!0})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("span",Object.assign({style:Qt},{children:"Layer:"})),(0,c.jsx)("input",{type:"text",value:null!==(r=null==t?void 0:t.id)&&void 0!==r?r:"None",disabled:!0})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("button",Object.assign({style:{width:"70px"},onClick:i},{children:"Add"})),(0,c.jsx)("button",Object.assign({style:{width:"70px"},onClick:o},{children:"Remove"})),(0,c.jsx)("button",Object.assign({style:{width:"70px"},onClick:s},{children:"Has"}))]}),(0,c.jsx)("div",{children:(0,c.jsx)("textarea",{style:{width:"100%",height:"6em"},value:a,disabled:!0})})]})}function Xt({sdk:e}){const[t,n]=(0,d.useState)(),[r,a]=(0,d.useState)();return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(h,Object.assign({header:"View.views - Collection"},{children:(0,c.jsx)(F,{name:"views",collection:e.View.views})})),(0,c.jsx)(g,{label:"Views",collection:e.View.views,additionalProperties:["id","name","layers"],propertyTransforms:{layers:e=>[...e].map((e=>e.id))},onChanged:(e,t)=>n(t)}),(0,c.jsx)(h,Object.assign({header:"View.layers - Collection"},{children:(0,c.jsx)(F,{name:"layers",collection:e.View.layers})})),(0,c.jsx)(g,{label:"Layers",collection:e.View.layers,additionalProperties:["id","name"],onChanged:(e,t)=>a(t)}),(0,c.jsx)(h,Object.assign({header:"View - Current"},{children:(0,c.jsx)(D,{name:"current",observable:e.View.current})})),(0,c.jsx)(h,Object.assign({header:"View - Create Layer"},{children:(0,c.jsx)(Wt,{sdk:e})})),(0,c.jsx)(h,Object.assign({header:"View - Activate"},{children:(0,c.jsx)($t,{selectedView:t})})),(0,c.jsx)(h,Object.assign({header:"Layer - Toggle"},{children:(0,c.jsx)(Gt,{selectedLayer:r})})),(0,c.jsx)(h,Object.assign({header:"View.layers controls"},{children:(0,c.jsx)(Yt,{selectedView:t,selectedLayer:r})}))]})}function qt(e){return(0,c.jsx)(c.Fragment,{children:(0,c.jsxs)(h,Object.assign({header:"Viewmode - Transition"},{children:[(0,c.jsx)(D,{name:"viewmode current",observable:e.sdk.Mode.current}),(0,c.jsx)(D,{name:"viewmode transition",observable:e.sdk.Mode.transition})]}))})}function Jt({sdk:e}){const[t,n]=(0,d.useState)(""),[r,a]=(0,d.useState)({}),l=(0,d.useCallback)(((e,t)=>{a((n=>Object.assign(Object.assign({},n),{[e]:t})))}),[]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)(y,{sdk:e,assets:r,setAssets:a,setSelectedAsset:n}),(0,c.jsx)(j,{sdk:e}),(0,c.jsx)(B,{sdk:e}),(0,c.jsx)(W,{sdk:e}),(0,c.jsx)(ve,{sdk:e}),(0,c.jsx)(ke,{sdk:e,selectedAsset:t,addAsset:l}),(0,c.jsx)(Se,{sdk:e}),(0,c.jsx)(Ae,{sdk:e}),"Plugin"in e&&(0,c.jsx)(Fe,{sdk:e}),(0,c.jsx)(Be,{sdk:e,selectedAsset:t,addAsset:l}),(0,c.jsx)($e,{sdk:e}),(0,c.jsx)(Ge,{sdk:e}),(0,c.jsx)(Je,{sdk:e}),(0,c.jsx)(et,{sdk:e}),(0,c.jsx)(lt,{sdk:e}),(0,c.jsx)(ft,{sdk:e}),(0,c.jsx)(pt,{sdk:e}),"Tag"in e&&(0,c.jsx)(Mt,{sdk:e,selectedAsset:t}),(0,c.jsx)(Ht,{sdk:e}),"View"in e&&(0,c.jsx)(Xt,{sdk:e}),(0,c.jsx)(qt,{sdk:e})]})}(()=>{const e={}})();var Zt=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};document.getElementById("control-root").innerHTML="<div>\n  <div class='drawer'>\n    <span class='drawer-label'>Mattertag</span>\n    <div>\n      <select id='mattertag-selector' class='mattertag-selector'>\n        <option disabled selected value />\n      </select>\n    </div>\n\n    \x3c!-- Mattertag Add --\x3e\n    <div class='controlPanel'>\n      <div class='controlPanelHeader'>Mattertag - Add</div>\n      <label for='tag-add-title'>Title:</label>\n      <input type='text' id='tag-add-title'>\n      <br>\n      <label for='tag-add-desc'>Desc:</label>\n      <textarea id='tag-add-desc'></textarea>\n      <br>\n      position:\n      <br>\n      <label for='tag-add-pos-x'>x: </label><input class='small-input' id='tag-add-pos-x' type='number' step='0.001' value='0'>\n      <label for='tag-add-pos-y'>y: </label><input class='small-input' id='tag-add-pos-y' type='number' step='0.001' value='0'>\n      <label for='tag-add-pos-z'>z: </label><input class='small-input' id='tag-add-pos-z' type='number' step='0.001' value='0'>\n      <br>\n      normal:\n      <br>\n      <label for='tag-add-norm-x'>x: </label><input class='small-input' id='tag-add-norm-x' type='number' step='0.001' value='0'>\n      <label for='tag-add-norm-y'>y: </label><input class='small-input' id='tag-add-norm-y' type='number' step='0.001' value='1'>\n      <label for='tag-add-norm-z'>z: </label><input class='small-input' id='tag-add-norm-z' type='number' step='0.001' value='0'>\n      <br>\n      media:\n      <br>\n      <label for='tag-add-mtype'>type:</label><select id='tag-add-mtype' class='mtag-media-type'></select>\n      <label for='tag-add-msrc'>src:</label><input type='text' id='tag-add-msrc'>\n      <br>\n      <button id='tag-add'>Add</button>\n    </div>\n\n    \x3c!-- Mattertag Move --\x3e\n    <div class='controlPanel'>\n      <div class='controlPanelHeader'>Mattertag - Move</div>\n      position:\n      <br>\n      <label for='tag-move-pos-x'>x: </label><input class='small-input' id='tag-move-pos-x' type='number' step='0.001' value='0'>\n      <label for='tag-move-pos-y'>y: </label><input class='small-input' id='tag-move-pos-y' type='number' step='0.001' value='0'>\n      <label for='tag-move-pos-z'>z: </label><input class='small-input' id='tag-move-pos-z' type='number' step='0.001' value='0'>\n      <br>\n      normal:\n      <br>\n      <label for='tag-move-norm-x'>x: </label><input class='small-input' id='tag-move-norm-x' type='number' step='0.001' value='0'>\n      <label for='tag-move-norm-y'>y: </label><input class='small-input' id='tag-move-norm-y' type='number' step='0.001' value='1'>\n      <label for='tag-move-norm-z'>z: </label><input class='small-input' id='tag-move-norm-z' type='number' step='0.001' value='0'>\n      <br>\n      <button id='tag-move'>Move</button>\n    </div>\n\n    \x3c!-- Mattertag Remove --\x3e\n    <div id='mattertag-controls' class='controlPanel'>\n      <div class='controlPanelHeader'>Mattertag - Remove</div>\n      <br />\n      <div>\n        <button id='mattertag-remove'>Remove Mattertag</button>\n      </div>\n    </div>\n\n    \x3c!-- Mattertag Editor --\x3e\n    <div class='controlPanel'>\n      <div class=\"controlPanelHeader\">Mattertag - Edit</div>\n      <table>\n        <tr>\n          <td><label for='tag-edit-title'>Title:</label></td>\n          <td><input type='text' id='tag-edit-title'></td>\n        </tr>\n        <tr>\n          <td><label for='tag-edit-media'>Media:</label></td>\n          <td><input type='text' id='tag-edit-media'></td>\n          <td><select id='tag-edit-mediatype' class='mtag-media-type'></select></td>\n        </tr>\n        <tr>\n          <td><label for='tag-edit-desc'>Desc:</label></td>\n          <td><textarea id='tag-edit-desc'></textarea></td>\n        </tr>\n      </table>\n      <button id='mattertag-edit'>Edit</button>\n    </div>\n\n    \x3c!-- Mattertag prevent --\x3e\n    <div class='controlPanel'>\n      <div class='controlPanelHeader'>Mattertag - Prevent Action</div>\n      checked => functionality allowed<br />unchecked => disallowed\n      <br />\n      <br />\n      <div>\n        <label for='tag-lock-bb'>Billboard:</label>\n        <input type='checkbox' id='tag-lock-bb' checked></td>\n      </div>\n      <div>\n        <label>Navigation:</label>\n        <input type='checkbox' id='tag-lock-nav' checked></td>\n      </div>\n    </div>\n\n    \x3c!-- Mattertag Color --\x3e\n    <div class='controlPanel'>\n      <div class='controlPanelHeader'>Mattertag - Color</div>\n      <br>\n      <label>Color</label>\n      <div>\n        <label for='tag-color-r'>r: </label><input class='small-input' id='tag-color-r' type='number' step='0.001' value='1'>\n      </div>\n      <div>\n        <label for='tag-color-g'>g: </label><input class='small-input' id='tag-color-g' type='number' step='0.001' value='0'>\n      </div>\n      <div>\n        <label for='tag-color-b'>b: </label><input class='small-input' id='tag-color-b' type='number' step='0.001' value='1'>\n      </div>\n      <br>\n      <button id='tag-edit-color'>Edit Color</button>\n    </div>\n\n    \x3c!-- Mattertag Opacity --\x3e\n    <div class='controlPanel'>\n      <div class='controlPanelHeader'>Mattertag - Edit Opacity</div>\n      <br />\n      <div>\n        <label for='mattertag-opacity'>Opacity:</label>\n        <input type='number' min='0' max='1' step='0.001' value='.5' id='mattertag-opacity'>\n      </div>\n      <div>\n        <button id='mattertag-opacity-edit'>Edit Opacity</button>\n      </div>\n    </div>\n\n    \x3c!-- Mattertag injection --\x3e\n    <div id=\"tagHTML\" class=\"controlPanel\">\n      <div class=\"controlPanelHeader\">Mattertag - Inject HTML</div>\n      <table height=\"100%\">\n        <tr>\n          <td>\n            <textarea id='injectedHTML'></textarea>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <div>\n              <table>\n                <tr>\n                  <td>Size:</td>\n                  <td><input type=\"text\" id=\"mattertag-html-w\" class=\"small-input\"></td>\n                  <td><input type=\"text\" id=\"mattertag-html-h\" class=\"small-input\"></td>\n                </tr>\n              </table>\n            </div>\n          </td>\n        </tr>\n        <tr>\n          <td><button id=\"injectHTML\">INJECT HTML</button></td>\n        </tr>\n      </table>\n    </div>\n\n    \x3c!-- Mattertag Navigation --\x3e\n    <div id='mattertag-controls' class='controlPanel'>\n      <div class='controlPanelHeader'>Mattertag - Navigate</div>\n      <br />\n      <div>\n        <select id='mattertag-navigation-type'>\n          <option value='FLY'>Fly</option>\n          <option value='FADEOUT'>Fade Out</option>\n          <option value='INSTANT'>Instant</option>\n        </select>\n      </div>\n      <div>\n        <label for='mattertag-navigation-force'>Force:</label>\n        <input id='mattertag-navigation-force' type='checkbox'></input>\n      </div>\n      <div>\n        <button id='navigateToTag'>Navigate</button>\n      </div>\n    </div>\n\n  </div>\n\n\n  \x3c!-- Mattertag Stem --\x3e\n  <div class='controlPanel'>\n    <div class='controlPanelHeader'>Mattertag - Stem</div>\n    <br>\n    <label>Editable Stem Properties</label>\n    <div>\n      <label for='stem-height'>Stem Height: </label><input class='small-input' id='stem-height' type='number' step='0.01' value='0.7'>\n    </div>\n    <input id='stem-visible' type='checkbox' checked>Visible</input>\n    <br>\n    <button id='tag-edit-stem'>Update Stem</button>\n  </div>\n\n\n  \x3c!-- Screenshots --\x3e\n  <div class='controlPanel'>\n    <button id=\"screenshot\">Screenshot</button>\n    <button id=\"equirectangle\">Equirectangular</button>\n    <br />\n    <br />\n    <img id='screenshot-preview'>\n  </div>\n\n  \x3c!-- Pose Observable --\x3e\n  <div id=\"playerPose\" class=\"controlPanel\">\n    <textarea id='pose'></textarea>\n    <br />\n    <button id=\"getPose\">Get Pose</button>\n  </div>\n\n  \x3c!-- Pointer Observable --\x3e\n  <div id=\"pointerInfo\" class=\"controlPanel\">\n    <textarea id='pointer'></textarea>\n    <br />\n    <button id=\"getPointer\">Toggle Pointer Data</button>\n  </div>\n\n  \x3c!-- Movement --\x3e\n  <div class=\"controlPanel navControls\">\n    <div class=\"controlPanelHeader\">Movement</div>\n    <br />\n    <table>\n      <tr>\n        <td></td>\n        <td><button id=\"FORWARD\" data-direction='FORWARD' class=\"navButton\">Fwd</button></td>\n        <td></td>\n      </tr>\n       <tr>\n        <td><button id=\"LEFT\" data-direction='LEFT' class=\"navButton\">Left</button></td>\n        <td></td>\n        <td><button id=\"RIGHT\" data-direction='RIGHT' class=\"navButton\">Right</button></td>\n      </tr>\n       <tr>\n        <td></td>\n        <td><button id=\"BACK\" data-direction='BACK' class=\"navButton\">Back</button></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td><input type=\"text\" id=\"positionX\" name=\"panX\" class=\"rotationbutton\"></td>\n        <td><input type=\"text\" id=\"positionZ\" name=\"panZ\" class=\"rotationbutton\"></td>\n        <td><button id=\"pan\">Pan</button></td>\n        </tr>\n      </tr>\n    </table>\n  </div>\n\n  \x3c!-- Rotation Controls --\x3e\n  <div class=\"controlPanel rotationControls\">\n    <div class=\"controlPanelHeader\">Rotation</div>\n    <br />\n    <table>\n      <tr>\n        <td></td>\n        <td><button id=\"tiltUp\" data-direction='UP' class=\"rotationbutton\">Up</button></td>\n        <td></td>\n      </tr>\n       <tr>\n        <td><button id=\"rotateLeft\" data-direction='LEFT' class=\"rotationbutton\">Left</button></td>\n        <td><input type=\"text\" id=\"rotation\" name=\"rotation\" class=\"rotationbutton\"></td>\n        <td><button id=\"rotateRight\" data-direction='RIGHT' class=\"rotationbutton\">Right</button></td>\n      </tr>\n       <tr>\n        <td></td>\n        <td><button id=\"tiltDown\" data-direction='DOWN' class=\"rotationbutton\">Down</button></td>\n        <td></td>\n      </tr>\n    </table>\n    <br />\n    <input type=\"text\" id=\"rotationX\" name=\"rotationX\" class=\"rotationbutton\">&nbsp;&nbsp;\n    <input type=\"text\" id=\"rotationY\" name=\"rotationY\" class=\"rotationbutton\">&nbsp;&nbsp;\n    <button id=\"freeRotate\" class=\"rotationbutton\">Free</button>\n    <button id=\"orient\" class=\"rotationbutton\">Orient</button>\n    <input type=\"text\" id=\"rotationSpeed\" name=\"rotationSpeed\" class=\"rotationbutton\">&nbsp;&nbsp;\n  </div>\n\n  \x3c!-- Zoom Controls --\x3e\n  <div class=\"controlPanel zoomControls\">\n    <div class=\"controlPanelHeader\">Zoom</div>\n    <br />\n    <table>\n      <tr>\n        <td>Current Zoom:</td>\n        <td><label id='current-zoom-level'>1</label></td>\n\n      </tr>\n      <tr>\n        <td><input type=\"text\" id=\"zoom-by-val\" name=\"zoom-by-val\" class=\"rotationbutton\"></td>\n        <td><button id=\"zoom-by\" class=\"\">Zoom By</button></td>\n      </tr>\n      <tr>\n        <td><input type=\"text\" id=\"zoom-to-val\" name=\"zoom-to-val\" class=\"rotationbutton\"></td>\n        <td><button id=\"zoom-to\" class=\"\">Zoom To</button></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td><button id=\"zoom-reset\" class=\"rotationbutton\">Reset</button></td>\n      </tr>\n    </table>\n  </div>\n\n  \x3c!-- Mode Controls --\x3e\n  <div class=\"controlPanel modeControls\">\n    <div class=\"controlPanelHeader\">Mode</div>\n    <br />\n    <table>\n      <tr>\n        <td></td>\n        <td><button id=\"INSIDE\" class=\"modeButton\">Inside</button></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td><button id=\"DOLLHOUSE\" class=\"modeButton\">Dollhouse</button></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td><button id=\"FLOORPLAN\" class=\"modeButton\">Floorplan</button></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td>\n          <p>\n            Transition:\n            <select id=\"modeStyles\">\n              <option value='FLY'>Fly</option>\n              <option value='FADEOUT'>Fade to black</option>\n              <option value='INSTANT'>Instant</option>\n            </select>\n          </p>\n        </td>\n        <td></td>\n      </tr>\n    </table>\n  </div>\n\n  \x3c!-- sweep Controls --\x3e\n  <div class=\"controlPanel modeControls\">\n    <div class=\"controlPanelHeader\">Fly To Sweep By ID</div>\n    <br />\n    <table>\n      <tr>\n        <td>\n        <p>\n          Sweep:\n          <select class='sweep-selector' id='sweepIds'></select>\n        </p>\n        </td>\n      </tr>\n      <tr>\n        <td>\n        <p>\n          Rotation:\n          <input type=\"text\" id=\"sweepRotationX\" name=\"rotationX\" class=\"rotationbutton\">&nbsp;&nbsp;\n          <input type=\"text\" id=\"sweepRotationY\" name=\"rotationY\" class=\"rotationbutton\">&nbsp;&nbsp;\n        </p>\n        </td>\n      </tr>\n      <tr>\n        <td>\n        <p>\n          Transition:\n          <select id=\"flyStyles\">\n            <option value='FLY'>Fly</option>\n            <option value='FADEOUT'>Fade to black</option>\n            <option value='INSTANT'>Instant</option>\n          </select>\n        </p>\n        </td>\n      </tr>\n      <tr>\n        <td>\n        <p>\n          Transition Time:\n          <input type=\"text\" id=\"sweepTransitionTime\">&nbsp;&nbsp;\n        </p>\n        </td>\n      </tr>\n      <tr>\n        <td>\n          <button id=\"moveToSweep\" class=\"sweepButton\">Move To Sweep</button>\n        </td>\n      </tr>\n    </table>\n  </div>\n\n  \x3c!-- Sweep enable --\x3e\n  <div class=\"controlPanel\">\n    <div class=\"controlPanelHeader\">Sweep - Enable</div>\n    <br>\n    <select class='sweep-selector' id='sweep-enable-selector'></select>\n    <br>\n    <input id='sweep-enable' type='checkbox' checked>Enabled</input>\n  </div>\n\n  \x3c!-- Tour Controls --\x3e\n  <div id=\"tour-controls\" class=\"controlPanel\">\n    <div class='controlPanelHeader'>Tour Controls</div>\n    <table>\n      <tr>\n        <td></td>\n        <td><button id=\"tourStartBtn\">Start Tour</button></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td><button id=\"tourStopBtn\">Stop Tour</button></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td><label for='tour-stepped'>Index to Step</td>\n        <td><input type=\"text\" id=\"tour-stepped\" name=\"tour-stepped\"></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td><button id=\"tourSteppedBtn\">Stepped Tour</button></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td><button id=\"tourPrevBtn\">Prev</button></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td><button id=\"tourNextBtn\">Next</button></td>\n        <td></td>\n      </tr>\n    </table>\n    <br />\n  </div>\n\n  <div id='root'></div>\n</div>\n";const en=document.getElementById("showcase"),tn=new URLSearchParams(window.location.search),nn={host:tn.get("host")||tn.get("apiHost")||window.location.origin,sdkKey:tn.get("sdkKey")||tn.get("applicationKey")||"u2mw9w1qe1sasr0sbiucrgceb",bundleVersion:tn.get("bundleVersion")||"",useDirectMessages:!(!tn.get("bundleVersion")&&!tn.get("dm")||"0"===tn.get("dm")),sdkVersion:tn.get("sdkVersion")||"2.0.1-0-g64e7e88",workshop:tn.get("workshop")||"",connectionDelay:parseInt(tn.get("delay")||"0",10),provider:tn.get("provider")||void 0};function rn(){return Zt(this,void 0,void 0,(function*(){var e;if(nn.connectionDelay>0&&(yield(e=nn.connectionDelay,new Promise(((t,n)=>{setTimeout(t,e)})))),nn.useDirectMessages){const e=en.contentWindow,t=e.MP_SDK;try{return yield t.connect(e,{provider:nn.provider})}catch(n){return yield t.connect(e,nn.sdkKey)}}if("local"===nn.sdkVersion){const{connect:e}=yield a.e(562).then(a.bind(a,562));return yield e(en,{provider:nn.provider})}try{return yield window.MP_SDK.connect(en,{provider:nn.provider})}catch(e){return yield window.MP_SDK.connect(en,nn.sdkKey,"")}}))}function an(){var e;return Zt(this,void 0,void 0,(function*(){try{nn.useDirectMessages||"local"===nn.sdkVersion||(yield(t=nn.sdkVersion,new Promise((e=>{console.log("Loading SDK bootstrap version:",t);var n="https://static.matterport.com/showcase-sdk/"+t+"/sdk.js",r=document.createElement("script");r.type="text/javascript",r.src=n,r.onload=e,document.head.appendChild(r)}))));const e=yield rn();window.SDK_INSTANCE=e,s(e,en),function(e){const t=document.getElementById("react-root");t&&(0,u.s)(t).render((0,c.jsx)("div",{children:(0,c.jsx)(Jt,{sdk:e})}))}(e)}catch(e){console.error(e)}var t;window.THREE=null===(e=en.contentWindow)||void 0===e?void 0:e.THREE}))}!function(){Zt(this,void 0,void 0,(function*(){if(!tn.get("m")&&!tn.get("model")){const e="No model specified. Specify a model using ?m=[modelSid]",t=document.getElementById("status");throw t.classList.add("error"),t.innerText=e,Error(e)}nn.bundleVersion?function(e,t,n){const r=t.bundleVersion,a=r.startsWith("http");e.onload=n;let l="";l+=a?r+"/showcase.html":"https://static.matterport.com/showcase-sdk/bundle/"+r+"/showcase.html";const i=new URLSearchParams(window.location.search);i.set("applicationKey",t.sdkKey),i.set("apiHost",t.host),e.src=l+"?"+decodeURIComponent(i)}(en,nn,an):function(e,t,n){e.onload=n;const r=t.workshop?"/work/":"/show/",a=new URLSearchParams(window.location.search);a.set("applicationKey",t.sdkKey),e.src=t.host+r+"?"+decodeURIComponent(a.toString())}(en,nn,an)}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,